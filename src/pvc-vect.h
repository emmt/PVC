/*
 * pvc-vec.h -
 *
 * Definitions for SIMD vectors in PVC library.
 *
 * *** WARNING *** This code has been generated by a script, do not edit
 * *** WARNING *** directly.
 *
 *---------------------------------------------------------------------------
 *
 * This file is part of PVC software released under the MIT "Expat" license.
 *
 * Copyright (c) 2020: Éric Thiébaut <https://github.com/emmt/PVC>
 */
#ifndef _PVC_VECT_H
#define _PVC_VECT_H 1

#include <stdalign.h>
#include <immintrin.h>
#include <pvc-math.h>

/**
 * @addtogroup vect Packed vector types and operations.
 *
 * PVC provides the following types:
 *
 * Note that suffixes are not quite the same as those considered in the
 * meta-programming part.  The reason is to keep readable short type
 * names.
 *
 * @{
 */

/**
 * Vector of 16 8-bit floating-point values.
 */
typedef union PVC_Vect16c PVC_Vect16c;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16c {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) int8_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 32 8-bit floating-point values.
 */
typedef union PVC_Vect32c PVC_Vect32c;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect32c {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) int8_t _pvc_val[32];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 64 8-bit floating-point values.
 */
typedef union PVC_Vect64c PVC_Vect64c;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect64c {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) int8_t _pvc_val[64];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 8-bit unsigned integers.
 */
typedef union PVC_Vect16uc PVC_Vect16uc;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16uc {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) uint8_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 32 8-bit unsigned integers.
 */
typedef union PVC_Vect32uc PVC_Vect32uc;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect32uc {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) uint8_t _pvc_val[32];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 64 8-bit unsigned integers.
 */
typedef union PVC_Vect64uc PVC_Vect64uc;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect64uc {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) uint8_t _pvc_val[64];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 16-bit floating-point values.
 */
typedef union PVC_Vect8s PVC_Vect8s;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8s {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) int16_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 16-bit floating-point values.
 */
typedef union PVC_Vect16s PVC_Vect16s;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16s {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) int16_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 32 16-bit floating-point values.
 */
typedef union PVC_Vect32s PVC_Vect32s;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect32s {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) int16_t _pvc_val[32];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 16-bit unsigned integers.
 */
typedef union PVC_Vect8us PVC_Vect8us;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8us {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) uint16_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 16-bit unsigned integers.
 */
typedef union PVC_Vect16us PVC_Vect16us;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16us {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) uint16_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 32 16-bit unsigned integers.
 */
typedef union PVC_Vect32us PVC_Vect32us;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect32us {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) uint16_t _pvc_val[32];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 32-bit floating-point values.
 */
typedef union PVC_Vect4i PVC_Vect4i;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4i {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) int32_t _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 32-bit floating-point values.
 */
typedef union PVC_Vect8i PVC_Vect8i;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8i {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) int32_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 32-bit floating-point values.
 */
typedef union PVC_Vect16i PVC_Vect16i;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16i {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) int32_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 32-bit unsigned integers.
 */
typedef union PVC_Vect4ui PVC_Vect4ui;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4ui {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) uint32_t _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 32-bit unsigned integers.
 */
typedef union PVC_Vect8ui PVC_Vect8ui;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8ui {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) uint32_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 32-bit unsigned integers.
 */
typedef union PVC_Vect16ui PVC_Vect16ui;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16ui {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) uint32_t _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 2 64-bit floating-point values.
 */
typedef union PVC_Vect2l PVC_Vect2l;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect2l {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) int64_t _pvc_val[2];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 64-bit floating-point values.
 */
typedef union PVC_Vect4l PVC_Vect4l;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4l {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) int64_t _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 64-bit floating-point values.
 */
typedef union PVC_Vect8l PVC_Vect8l;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8l {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) int64_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 2 64-bit unsigned integers.
 */
typedef union PVC_Vect2ul PVC_Vect2ul;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect2ul {
# ifdef __SSE2__
    __m128i _pvc_xmm;
# endif
    alignas(16) uint64_t _pvc_val[2];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 64-bit unsigned integers.
 */
typedef union PVC_Vect4ul PVC_Vect4ul;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4ul {
# ifdef __AVX__
    __m256i _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[2];
# endif
    alignas(32) uint64_t _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 64-bit unsigned integers.
 */
typedef union PVC_Vect8ul PVC_Vect8ul;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8ul {
# ifdef __AVX512F__
    __m512i _pvc_zmm;
# endif
# ifdef __AVX__
    __m256i _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128i _pvc_xmm[4];
# endif
    alignas(64) uint64_t _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 32-bit floating-point values.
 */
typedef union PVC_Vect4f PVC_Vect4f;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4f {
# ifdef __SSE__
    __m128 _pvc_xmm;
# endif
    alignas(16) float _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 32-bit floating-point values.
 */
typedef union PVC_Vect8f PVC_Vect8f;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8f {
# ifdef __AVX__
    __m256 _pvc_ymm;
# endif
# ifdef __SSE__
    __m128 _pvc_xmm[2];
# endif
    alignas(32) float _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 16 32-bit floating-point values.
 */
typedef union PVC_Vect16f PVC_Vect16f;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect16f {
# ifdef __AVX512F__
    __m512 _pvc_zmm;
# endif
# ifdef __AVX__
    __m256 _pvc_ymm[2];
# endif
# ifdef __SSE__
    __m128 _pvc_xmm[4];
# endif
    alignas(64) float _pvc_val[16];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 2 64-bit floating-point values.
 */
typedef union PVC_Vect2d PVC_Vect2d;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect2d {
# ifdef __SSE2__
    __m128d _pvc_xmm;
# endif
    alignas(16) double _pvc_val[2];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 4 64-bit floating-point values.
 */
typedef union PVC_Vect4d PVC_Vect4d;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect4d {
# ifdef __AVX__
    __m256d _pvc_ymm;
# endif
# ifdef __SSE2__
    __m128d _pvc_xmm[2];
# endif
    alignas(32) double _pvc_val[4];
};
#endif /* PVC_DOXYGEN_PARSING */
/**
 * Vector of 8 64-bit floating-point values.
 */
typedef union PVC_Vect8d PVC_Vect8d;
#ifndef PVC_DOXYGEN_PARSING
union PVC_Vect8d {
# ifdef __AVX512F__
    __m512d _pvc_zmm;
# endif
# ifdef __AVX__
    __m256d _pvc_ymm[2];
# endif
# ifdef __SSE2__
    __m128d _pvc_xmm[4];
# endif
    alignas(64) double _pvc_val[8];
};
#endif /* PVC_DOXYGEN_PARSING */

/**
 * @def pvc_vzero(T)
 *
 * @brief Get a zero-filled vector of given type.
 */
#define pvc_vzero(T)                       \
    _Generic(*(T)0,                        \
             PVC_Vect16c:  pvc_vzero_16c,  \
             PVC_Vect32c:  pvc_vzero_32c,  \
             PVC_Vect64c:  pvc_vzero_64c,  \
             PVC_Vect16uc: pvc_vzero_16uc, \
             PVC_Vect32uc: pvc_vzero_32uc, \
             PVC_Vect64uc: pvc_vzero_64uc, \
             PVC_Vect8s:   pvc_vzero_8s,   \
             PVC_Vect16s:  pvc_vzero_16s,  \
             PVC_Vect32s:  pvc_vzero_32s,  \
             PVC_Vect8us:  pvc_vzero_8us,  \
             PVC_Vect16us: pvc_vzero_16us, \
             PVC_Vect32us: pvc_vzero_32us, \
             PVC_Vect4i:   pvc_vzero_4i,   \
             PVC_Vect8i:   pvc_vzero_8i,   \
             PVC_Vect16i:  pvc_vzero_16i,  \
             PVC_Vect4ui:  pvc_vzero_4ui,  \
             PVC_Vect8ui:  pvc_vzero_8ui,  \
             PVC_Vect16ui: pvc_vzero_16ui, \
             PVC_Vect2l:   pvc_vzero_2l,   \
             PVC_Vect4l:   pvc_vzero_4l,   \
             PVC_Vect8l:   pvc_vzero_8l,   \
             PVC_Vect2ul:  pvc_vzero_2ul,  \
             PVC_Vect4ul:  pvc_vzero_4ul,  \
             PVC_Vect8ul:  pvc_vzero_8ul,  \
             PVC_Vect4f:   pvc_vzero_4f,   \
             PVC_Vect8f:   pvc_vzero_8f,   \
             PVC_Vect16f:  pvc_vzero_16f,  \
             PVC_Vect2d:   pvc_vzero_2d,   \
             PVC_Vect4d:   pvc_vzero_4d,   \
             PVC_Vect8d:   pvc_vzero_8d)()

static inline
PVC_Vect16c pvc_vzero_16c(void)
{
    return (PVC_Vect16c){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect32c pvc_vzero_32c(void)
{
    return (PVC_Vect32c){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
#endif
    };
}

static inline
PVC_Vect64c pvc_vzero_64c(void)
{
    return (PVC_Vect64c){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
        ._pvc_val[32] = 0,
        ._pvc_val[33] = 0,
        ._pvc_val[34] = 0,
        ._pvc_val[35] = 0,
        ._pvc_val[36] = 0,
        ._pvc_val[37] = 0,
        ._pvc_val[38] = 0,
        ._pvc_val[39] = 0,
        ._pvc_val[40] = 0,
        ._pvc_val[41] = 0,
        ._pvc_val[42] = 0,
        ._pvc_val[43] = 0,
        ._pvc_val[44] = 0,
        ._pvc_val[45] = 0,
        ._pvc_val[46] = 0,
        ._pvc_val[47] = 0,
        ._pvc_val[48] = 0,
        ._pvc_val[49] = 0,
        ._pvc_val[50] = 0,
        ._pvc_val[51] = 0,
        ._pvc_val[52] = 0,
        ._pvc_val[53] = 0,
        ._pvc_val[54] = 0,
        ._pvc_val[55] = 0,
        ._pvc_val[56] = 0,
        ._pvc_val[57] = 0,
        ._pvc_val[58] = 0,
        ._pvc_val[59] = 0,
        ._pvc_val[60] = 0,
        ._pvc_val[61] = 0,
        ._pvc_val[62] = 0,
        ._pvc_val[63] = 0,
#endif
    };
}

static inline
PVC_Vect16uc pvc_vzero_16uc(void)
{
    return (PVC_Vect16uc){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect32uc pvc_vzero_32uc(void)
{
    return (PVC_Vect32uc){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
#endif
    };
}

static inline
PVC_Vect64uc pvc_vzero_64uc(void)
{
    return (PVC_Vect64uc){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
        ._pvc_val[32] = 0,
        ._pvc_val[33] = 0,
        ._pvc_val[34] = 0,
        ._pvc_val[35] = 0,
        ._pvc_val[36] = 0,
        ._pvc_val[37] = 0,
        ._pvc_val[38] = 0,
        ._pvc_val[39] = 0,
        ._pvc_val[40] = 0,
        ._pvc_val[41] = 0,
        ._pvc_val[42] = 0,
        ._pvc_val[43] = 0,
        ._pvc_val[44] = 0,
        ._pvc_val[45] = 0,
        ._pvc_val[46] = 0,
        ._pvc_val[47] = 0,
        ._pvc_val[48] = 0,
        ._pvc_val[49] = 0,
        ._pvc_val[50] = 0,
        ._pvc_val[51] = 0,
        ._pvc_val[52] = 0,
        ._pvc_val[53] = 0,
        ._pvc_val[54] = 0,
        ._pvc_val[55] = 0,
        ._pvc_val[56] = 0,
        ._pvc_val[57] = 0,
        ._pvc_val[58] = 0,
        ._pvc_val[59] = 0,
        ._pvc_val[60] = 0,
        ._pvc_val[61] = 0,
        ._pvc_val[62] = 0,
        ._pvc_val[63] = 0,
#endif
    };
}

static inline
PVC_Vect8s pvc_vzero_8s(void)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect16s pvc_vzero_16s(void)
{
    return (PVC_Vect16s){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect32s pvc_vzero_32s(void)
{
    return (PVC_Vect32s){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
#endif
    };
}

static inline
PVC_Vect8us pvc_vzero_8us(void)
{
    return (PVC_Vect8us){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect16us pvc_vzero_16us(void)
{
    return (PVC_Vect16us){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect32us pvc_vzero_32us(void)
{
    return (PVC_Vect32us){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
        ._pvc_val[16] = 0,
        ._pvc_val[17] = 0,
        ._pvc_val[18] = 0,
        ._pvc_val[19] = 0,
        ._pvc_val[20] = 0,
        ._pvc_val[21] = 0,
        ._pvc_val[22] = 0,
        ._pvc_val[23] = 0,
        ._pvc_val[24] = 0,
        ._pvc_val[25] = 0,
        ._pvc_val[26] = 0,
        ._pvc_val[27] = 0,
        ._pvc_val[28] = 0,
        ._pvc_val[29] = 0,
        ._pvc_val[30] = 0,
        ._pvc_val[31] = 0,
#endif
    };
}

static inline
PVC_Vect4i pvc_vzero_4i(void)
{
    return (PVC_Vect4i){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8i pvc_vzero_8i(void)
{
    return (PVC_Vect8i){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect16i pvc_vzero_16i(void)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect4ui pvc_vzero_4ui(void)
{
    return (PVC_Vect4ui){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8ui pvc_vzero_8ui(void)
{
    return (PVC_Vect8ui){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect16ui pvc_vzero_16ui(void)
{
    return (PVC_Vect16ui){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect2l pvc_vzero_2l(void)
{
    return (PVC_Vect2l){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
#endif
    };
}

static inline
PVC_Vect4l pvc_vzero_4l(void)
{
    return (PVC_Vect4l){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8l pvc_vzero_8l(void)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect2ul pvc_vzero_2ul(void)
{
    return (PVC_Vect2ul){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
#endif
    };
}

static inline
PVC_Vect4ul pvc_vzero_4ul(void)
{
    return (PVC_Vect4ul){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8ul pvc_vzero_8ul(void)
{
    return (PVC_Vect8ul){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_si512(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_si256(),
        ._pvc_ymm[1] = _mm256_setzero_si256(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_si128(),
        ._pvc_xmm[1] = _mm_setzero_si128(),
        ._pvc_xmm[2] = _mm_setzero_si128(),
        ._pvc_xmm[3] = _mm_setzero_si128(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect4f pvc_vzero_4f(void)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_setzero_ps(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8f pvc_vzero_8f(void)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_ps(),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_setzero_ps(),
        ._pvc_xmm[1] = _mm_setzero_ps(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

static inline
PVC_Vect16f pvc_vzero_16f(void)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_ps(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_ps(),
        ._pvc_ymm[1] = _mm256_setzero_ps(),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_setzero_ps(),
        ._pvc_xmm[1] = _mm_setzero_ps(),
        ._pvc_xmm[2] = _mm_setzero_ps(),
        ._pvc_xmm[3] = _mm_setzero_ps(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
        ._pvc_val[8] = 0,
        ._pvc_val[9] = 0,
        ._pvc_val[10] = 0,
        ._pvc_val[11] = 0,
        ._pvc_val[12] = 0,
        ._pvc_val[13] = 0,
        ._pvc_val[14] = 0,
        ._pvc_val[15] = 0,
#endif
    };
}

static inline
PVC_Vect2d pvc_vzero_2d(void)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_setzero_pd(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
#endif
    };
}

static inline
PVC_Vect4d pvc_vzero_4d(void)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_setzero_pd(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_pd(),
        ._pvc_xmm[1] = _mm_setzero_pd(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
#endif
    };
}

static inline
PVC_Vect8d pvc_vzero_8d(void)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_setzero_pd(),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_setzero_pd(),
        ._pvc_ymm[1] = _mm256_setzero_pd(),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_setzero_pd(),
        ._pvc_xmm[1] = _mm_setzero_pd(),
        ._pvc_xmm[2] = _mm_setzero_pd(),
        ._pvc_xmm[3] = _mm_setzero_pd(),
#else
        ._pvc_val[0] = 0,
        ._pvc_val[1] = 0,
        ._pvc_val[2] = 0,
        ._pvc_val[3] = 0,
        ._pvc_val[4] = 0,
        ._pvc_val[5] = 0,
        ._pvc_val[6] = 0,
        ._pvc_val[7] = 0,
#endif
    };
}

/**
 * @def pvc_vload(T, addr)
 *
 * @brief Load packed values from memory.
 *
 * Load packed values of type @a T from address @a addr which may not be
 * aligned.
 */
#define pvc_vload(T, addr)                 \
    _Generic(*(T)0,                        \
             PVC_Vect16c:  pvc_vload_16c,  \
             PVC_Vect32c:  pvc_vload_32c,  \
             PVC_Vect64c:  pvc_vload_64c,  \
             PVC_Vect16uc: pvc_vload_16uc, \
             PVC_Vect32uc: pvc_vload_32uc, \
             PVC_Vect64uc: pvc_vload_64uc, \
             PVC_Vect8s:   pvc_vload_8s,   \
             PVC_Vect16s:  pvc_vload_16s,  \
             PVC_Vect32s:  pvc_vload_32s,  \
             PVC_Vect8us:  pvc_vload_8us,  \
             PVC_Vect16us: pvc_vload_16us, \
             PVC_Vect32us: pvc_vload_32us, \
             PVC_Vect4i:   pvc_vload_4i,   \
             PVC_Vect8i:   pvc_vload_8i,   \
             PVC_Vect16i:  pvc_vload_16i,  \
             PVC_Vect4ui:  pvc_vload_4ui,  \
             PVC_Vect8ui:  pvc_vload_8ui,  \
             PVC_Vect16ui: pvc_vload_16ui, \
             PVC_Vect2l:   pvc_vload_2l,   \
             PVC_Vect4l:   pvc_vload_4l,   \
             PVC_Vect8l:   pvc_vload_8l,   \
             PVC_Vect2ul:  pvc_vload_2ul,  \
             PVC_Vect4ul:  pvc_vload_4ul,  \
             PVC_Vect8ul:  pvc_vload_8ul,  \
             PVC_Vect4f:   pvc_vload_4f,   \
             PVC_Vect8f:   pvc_vload_8f,   \
             PVC_Vect16f:  pvc_vload_16f,  \
             PVC_Vect2d:   pvc_vload_2d,   \
             PVC_Vect4d:   pvc_vload_4d,   \
             PVC_Vect8d:   pvc_vload_8d)(addr)

static inline PVC_Vect16c
pvc_vload_16c(int8_t const* addr)
{
    return (PVC_Vect16c){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32c
pvc_vload_32c(int8_t const* addr)
{
    return (PVC_Vect32c){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[16]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect64c
pvc_vload_64c(int8_t const* addr)
{
    return (PVC_Vect64c){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[32]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[16]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[32]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[48]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
        ._pvc_val[32] = addr[32],
        ._pvc_val[33] = addr[33],
        ._pvc_val[34] = addr[34],
        ._pvc_val[35] = addr[35],
        ._pvc_val[36] = addr[36],
        ._pvc_val[37] = addr[37],
        ._pvc_val[38] = addr[38],
        ._pvc_val[39] = addr[39],
        ._pvc_val[40] = addr[40],
        ._pvc_val[41] = addr[41],
        ._pvc_val[42] = addr[42],
        ._pvc_val[43] = addr[43],
        ._pvc_val[44] = addr[44],
        ._pvc_val[45] = addr[45],
        ._pvc_val[46] = addr[46],
        ._pvc_val[47] = addr[47],
        ._pvc_val[48] = addr[48],
        ._pvc_val[49] = addr[49],
        ._pvc_val[50] = addr[50],
        ._pvc_val[51] = addr[51],
        ._pvc_val[52] = addr[52],
        ._pvc_val[53] = addr[53],
        ._pvc_val[54] = addr[54],
        ._pvc_val[55] = addr[55],
        ._pvc_val[56] = addr[56],
        ._pvc_val[57] = addr[57],
        ._pvc_val[58] = addr[58],
        ._pvc_val[59] = addr[59],
        ._pvc_val[60] = addr[60],
        ._pvc_val[61] = addr[61],
        ._pvc_val[62] = addr[62],
        ._pvc_val[63] = addr[63],
#endif
    };
}

static inline PVC_Vect16uc
pvc_vload_16uc(uint8_t const* addr)
{
    return (PVC_Vect16uc){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32uc
pvc_vload_32uc(uint8_t const* addr)
{
    return (PVC_Vect32uc){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[16]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect64uc
pvc_vload_64uc(uint8_t const* addr)
{
    return (PVC_Vect64uc){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[32]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[16]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[32]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[48]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
        ._pvc_val[32] = addr[32],
        ._pvc_val[33] = addr[33],
        ._pvc_val[34] = addr[34],
        ._pvc_val[35] = addr[35],
        ._pvc_val[36] = addr[36],
        ._pvc_val[37] = addr[37],
        ._pvc_val[38] = addr[38],
        ._pvc_val[39] = addr[39],
        ._pvc_val[40] = addr[40],
        ._pvc_val[41] = addr[41],
        ._pvc_val[42] = addr[42],
        ._pvc_val[43] = addr[43],
        ._pvc_val[44] = addr[44],
        ._pvc_val[45] = addr[45],
        ._pvc_val[46] = addr[46],
        ._pvc_val[47] = addr[47],
        ._pvc_val[48] = addr[48],
        ._pvc_val[49] = addr[49],
        ._pvc_val[50] = addr[50],
        ._pvc_val[51] = addr[51],
        ._pvc_val[52] = addr[52],
        ._pvc_val[53] = addr[53],
        ._pvc_val[54] = addr[54],
        ._pvc_val[55] = addr[55],
        ._pvc_val[56] = addr[56],
        ._pvc_val[57] = addr[57],
        ._pvc_val[58] = addr[58],
        ._pvc_val[59] = addr[59],
        ._pvc_val[60] = addr[60],
        ._pvc_val[61] = addr[61],
        ._pvc_val[62] = addr[62],
        ._pvc_val[63] = addr[63],
#endif
    };
}

static inline PVC_Vect8s
pvc_vload_8s(int16_t const* addr)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16s
pvc_vload_16s(int16_t const* addr)
{
    return (PVC_Vect16s){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[8]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32s
pvc_vload_32s(int16_t const* addr)
{
    return (PVC_Vect32s){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[16]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[8]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[16]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[24]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect8us
pvc_vload_8us(uint16_t const* addr)
{
    return (PVC_Vect8us){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16us
pvc_vload_16us(uint16_t const* addr)
{
    return (PVC_Vect16us){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[8]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32us
pvc_vload_32us(uint16_t const* addr)
{
    return (PVC_Vect32us){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[16]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[8]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[16]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[24]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect4i
pvc_vload_4i(int32_t const* addr)
{
    return (PVC_Vect4i){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8i
pvc_vload_8i(int32_t const* addr)
{
    return (PVC_Vect8i){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16i
pvc_vload_16i(int32_t const* addr)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[8]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[4]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[8]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect4ui
pvc_vload_4ui(uint32_t const* addr)
{
    return (PVC_Vect4ui){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8ui
pvc_vload_8ui(uint32_t const* addr)
{
    return (PVC_Vect8ui){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16ui
pvc_vload_16ui(uint32_t const* addr)
{
    return (PVC_Vect16ui){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[8]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[4]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[8]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect2l
pvc_vload_2l(int64_t const* addr)
{
    return (PVC_Vect2l){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4l
pvc_vload_4l(int64_t const* addr)
{
    return (PVC_Vect4l){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8l
pvc_vload_8l(int64_t const* addr)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[2]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[4]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect2ul
pvc_vload_2ul(uint64_t const* addr)
{
    return (PVC_Vect2ul){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4ul
pvc_vload_4ul(uint64_t const* addr)
{
    return (PVC_Vect4ul){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8ul
pvc_vload_8ul(uint64_t const* addr)
{
    return (PVC_Vect8ul){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_si256(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_load_si128(&addr[2]),
        ._pvc_xmm[2] = _mm_load_si128(&addr[4]),
        ._pvc_xmm[3] = _mm_load_si128(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect4f
pvc_vload_4f(float const* addr)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_load_ps(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vload_8f(float const* addr)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_ps(addr),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_load_ps(&addr[0]),
        ._pvc_xmm[1] = _mm_load_ps(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vload_16f(float const* addr)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_ps(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_ps(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_ps(&addr[8]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_load_ps(&addr[0]),
        ._pvc_xmm[1] = _mm_load_ps(&addr[4]),
        ._pvc_xmm[2] = _mm_load_ps(&addr[8]),
        ._pvc_xmm[3] = _mm_load_ps(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vload_2d(double const* addr)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_load_pd(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vload_4d(double const* addr)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_load_pd(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_pd(&addr[0]),
        ._pvc_xmm[1] = _mm_load_pd(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vload_8d(double const* addr)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_load_pd(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_load_pd(&addr[0]),
        ._pvc_ymm[1] = _mm256_load_pd(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_load_pd(&addr[0]),
        ._pvc_xmm[1] = _mm_load_pd(&addr[2]),
        ._pvc_xmm[2] = _mm_load_pd(&addr[4]),
        ._pvc_xmm[3] = _mm_load_pd(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

/**
 * @def pvc_vloadu(T, addr)
 *
 * @brief Load packed values from memory.
 *
 * Load packed values of type @a T from address @a addr which may not be
 * aligned.
 */
#define pvc_vloadu(T, addr)                 \
    _Generic(*(T)0,                         \
             PVC_Vect16c:  pvc_vloadu_16c,  \
             PVC_Vect32c:  pvc_vloadu_32c,  \
             PVC_Vect64c:  pvc_vloadu_64c,  \
             PVC_Vect16uc: pvc_vloadu_16uc, \
             PVC_Vect32uc: pvc_vloadu_32uc, \
             PVC_Vect64uc: pvc_vloadu_64uc, \
             PVC_Vect8s:   pvc_vloadu_8s,   \
             PVC_Vect16s:  pvc_vloadu_16s,  \
             PVC_Vect32s:  pvc_vloadu_32s,  \
             PVC_Vect8us:  pvc_vloadu_8us,  \
             PVC_Vect16us: pvc_vloadu_16us, \
             PVC_Vect32us: pvc_vloadu_32us, \
             PVC_Vect4i:   pvc_vloadu_4i,   \
             PVC_Vect8i:   pvc_vloadu_8i,   \
             PVC_Vect16i:  pvc_vloadu_16i,  \
             PVC_Vect4ui:  pvc_vloadu_4ui,  \
             PVC_Vect8ui:  pvc_vloadu_8ui,  \
             PVC_Vect16ui: pvc_vloadu_16ui, \
             PVC_Vect2l:   pvc_vloadu_2l,   \
             PVC_Vect4l:   pvc_vloadu_4l,   \
             PVC_Vect8l:   pvc_vloadu_8l,   \
             PVC_Vect2ul:  pvc_vloadu_2ul,  \
             PVC_Vect4ul:  pvc_vloadu_4ul,  \
             PVC_Vect8ul:  pvc_vloadu_8ul,  \
             PVC_Vect4f:   pvc_vloadu_4f,   \
             PVC_Vect8f:   pvc_vloadu_8f,   \
             PVC_Vect16f:  pvc_vloadu_16f,  \
             PVC_Vect2d:   pvc_vloadu_2d,   \
             PVC_Vect4d:   pvc_vloadu_4d,   \
             PVC_Vect8d:   pvc_vloadu_8d)(addr)

static inline PVC_Vect16c
pvc_vloadu_16c(int8_t const* addr)
{
    return (PVC_Vect16c){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32c
pvc_vloadu_32c(int8_t const* addr)
{
    return (PVC_Vect32c){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[16]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect64c
pvc_vloadu_64c(int8_t const* addr)
{
    return (PVC_Vect64c){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[32]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[16]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[32]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[48]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
        ._pvc_val[32] = addr[32],
        ._pvc_val[33] = addr[33],
        ._pvc_val[34] = addr[34],
        ._pvc_val[35] = addr[35],
        ._pvc_val[36] = addr[36],
        ._pvc_val[37] = addr[37],
        ._pvc_val[38] = addr[38],
        ._pvc_val[39] = addr[39],
        ._pvc_val[40] = addr[40],
        ._pvc_val[41] = addr[41],
        ._pvc_val[42] = addr[42],
        ._pvc_val[43] = addr[43],
        ._pvc_val[44] = addr[44],
        ._pvc_val[45] = addr[45],
        ._pvc_val[46] = addr[46],
        ._pvc_val[47] = addr[47],
        ._pvc_val[48] = addr[48],
        ._pvc_val[49] = addr[49],
        ._pvc_val[50] = addr[50],
        ._pvc_val[51] = addr[51],
        ._pvc_val[52] = addr[52],
        ._pvc_val[53] = addr[53],
        ._pvc_val[54] = addr[54],
        ._pvc_val[55] = addr[55],
        ._pvc_val[56] = addr[56],
        ._pvc_val[57] = addr[57],
        ._pvc_val[58] = addr[58],
        ._pvc_val[59] = addr[59],
        ._pvc_val[60] = addr[60],
        ._pvc_val[61] = addr[61],
        ._pvc_val[62] = addr[62],
        ._pvc_val[63] = addr[63],
#endif
    };
}

static inline PVC_Vect16uc
pvc_vloadu_16uc(uint8_t const* addr)
{
    return (PVC_Vect16uc){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32uc
pvc_vloadu_32uc(uint8_t const* addr)
{
    return (PVC_Vect32uc){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[16]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect64uc
pvc_vloadu_64uc(uint8_t const* addr)
{
    return (PVC_Vect64uc){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[32]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[16]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[32]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[48]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
        ._pvc_val[32] = addr[32],
        ._pvc_val[33] = addr[33],
        ._pvc_val[34] = addr[34],
        ._pvc_val[35] = addr[35],
        ._pvc_val[36] = addr[36],
        ._pvc_val[37] = addr[37],
        ._pvc_val[38] = addr[38],
        ._pvc_val[39] = addr[39],
        ._pvc_val[40] = addr[40],
        ._pvc_val[41] = addr[41],
        ._pvc_val[42] = addr[42],
        ._pvc_val[43] = addr[43],
        ._pvc_val[44] = addr[44],
        ._pvc_val[45] = addr[45],
        ._pvc_val[46] = addr[46],
        ._pvc_val[47] = addr[47],
        ._pvc_val[48] = addr[48],
        ._pvc_val[49] = addr[49],
        ._pvc_val[50] = addr[50],
        ._pvc_val[51] = addr[51],
        ._pvc_val[52] = addr[52],
        ._pvc_val[53] = addr[53],
        ._pvc_val[54] = addr[54],
        ._pvc_val[55] = addr[55],
        ._pvc_val[56] = addr[56],
        ._pvc_val[57] = addr[57],
        ._pvc_val[58] = addr[58],
        ._pvc_val[59] = addr[59],
        ._pvc_val[60] = addr[60],
        ._pvc_val[61] = addr[61],
        ._pvc_val[62] = addr[62],
        ._pvc_val[63] = addr[63],
#endif
    };
}

static inline PVC_Vect8s
pvc_vloadu_8s(int16_t const* addr)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16s
pvc_vloadu_16s(int16_t const* addr)
{
    return (PVC_Vect16s){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[8]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32s
pvc_vloadu_32s(int16_t const* addr)
{
    return (PVC_Vect32s){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[16]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[8]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[16]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[24]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect8us
pvc_vloadu_8us(uint16_t const* addr)
{
    return (PVC_Vect8us){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16us
pvc_vloadu_16us(uint16_t const* addr)
{
    return (PVC_Vect16us){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[8]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect32us
pvc_vloadu_32us(uint16_t const* addr)
{
    return (PVC_Vect32us){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[16]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[8]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[16]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[24]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
        ._pvc_val[16] = addr[16],
        ._pvc_val[17] = addr[17],
        ._pvc_val[18] = addr[18],
        ._pvc_val[19] = addr[19],
        ._pvc_val[20] = addr[20],
        ._pvc_val[21] = addr[21],
        ._pvc_val[22] = addr[22],
        ._pvc_val[23] = addr[23],
        ._pvc_val[24] = addr[24],
        ._pvc_val[25] = addr[25],
        ._pvc_val[26] = addr[26],
        ._pvc_val[27] = addr[27],
        ._pvc_val[28] = addr[28],
        ._pvc_val[29] = addr[29],
        ._pvc_val[30] = addr[30],
        ._pvc_val[31] = addr[31],
#endif
    };
}

static inline PVC_Vect4i
pvc_vloadu_4i(int32_t const* addr)
{
    return (PVC_Vect4i){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8i
pvc_vloadu_8i(int32_t const* addr)
{
    return (PVC_Vect8i){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16i
pvc_vloadu_16i(int32_t const* addr)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[8]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[4]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[8]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect4ui
pvc_vloadu_4ui(uint32_t const* addr)
{
    return (PVC_Vect4ui){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8ui
pvc_vloadu_8ui(uint32_t const* addr)
{
    return (PVC_Vect8ui){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16ui
pvc_vloadu_16ui(uint32_t const* addr)
{
    return (PVC_Vect16ui){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[8]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[4]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[8]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect2l
pvc_vloadu_2l(int64_t const* addr)
{
    return (PVC_Vect2l){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4l
pvc_vloadu_4l(int64_t const* addr)
{
    return (PVC_Vect4l){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8l
pvc_vloadu_8l(int64_t const* addr)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[2]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[4]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect2ul
pvc_vloadu_2ul(uint64_t const* addr)
{
    return (PVC_Vect2ul){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_si128(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4ul
pvc_vloadu_4ul(uint64_t const* addr)
{
    return (PVC_Vect4ul){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_si256(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8ul
pvc_vloadu_8ul(uint64_t const* addr)
{
    return (PVC_Vect8ul){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_si512(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_si256(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_si256(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_si128(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_si128(&addr[2]),
        ._pvc_xmm[2] = _mm_loadu_si128(&addr[4]),
        ._pvc_xmm[3] = _mm_loadu_si128(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect4f
pvc_vloadu_4f(float const* addr)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_loadu_ps(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vloadu_8f(float const* addr)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_ps(addr),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_loadu_ps(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_ps(&addr[4]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vloadu_16f(float const* addr)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_ps(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_ps(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_ps(&addr[8]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_loadu_ps(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_ps(&addr[4]),
        ._pvc_xmm[2] = _mm_loadu_ps(&addr[8]),
        ._pvc_xmm[3] = _mm_loadu_ps(&addr[12]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
        ._pvc_val[8] = addr[8],
        ._pvc_val[9] = addr[9],
        ._pvc_val[10] = addr[10],
        ._pvc_val[11] = addr[11],
        ._pvc_val[12] = addr[12],
        ._pvc_val[13] = addr[13],
        ._pvc_val[14] = addr[14],
        ._pvc_val[15] = addr[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vloadu_2d(double const* addr)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_loadu_pd(addr),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vloadu_4d(double const* addr)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_loadu_pd(addr),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_pd(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_pd(&addr[2]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vloadu_8d(double const* addr)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_loadu_pd(addr),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_loadu_pd(&addr[0]),
        ._pvc_ymm[1] = _mm256_loadu_pd(&addr[4]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_loadu_pd(&addr[0]),
        ._pvc_xmm[1] = _mm_loadu_pd(&addr[2]),
        ._pvc_xmm[2] = _mm_loadu_pd(&addr[4]),
        ._pvc_xmm[3] = _mm_loadu_pd(&addr[6]),
#else
        ._pvc_val[0] = addr[0],
        ._pvc_val[1] = addr[1],
        ._pvc_val[2] = addr[2],
        ._pvc_val[3] = addr[3],
        ._pvc_val[4] = addr[4],
        ._pvc_val[5] = addr[5],
        ._pvc_val[6] = addr[6],
        ._pvc_val[7] = addr[7],
#endif
    };
}

/**
 * @def pvc_vloadp(T, n, addr)
 *
 * @brief Partial load of packed values from memory.
 *
 * Load @a n consecutive values of type @a T from address @a addr which may not be
 * aligned.
 */
#define pvc_vloadp(T, n, addr)              \
    _Generic(*(T)0,                         \
             PVC_Vect16c:  pvc_vloadp_16c,  \
             PVC_Vect32c:  pvc_vloadp_32c,  \
             PVC_Vect64c:  pvc_vloadp_64c,  \
             PVC_Vect16uc: pvc_vloadp_16uc, \
             PVC_Vect32uc: pvc_vloadp_32uc, \
             PVC_Vect64uc: pvc_vloadp_64uc, \
             PVC_Vect8s:   pvc_vloadp_8s,   \
             PVC_Vect16s:  pvc_vloadp_16s,  \
             PVC_Vect32s:  pvc_vloadp_32s,  \
             PVC_Vect8us:  pvc_vloadp_8us,  \
             PVC_Vect16us: pvc_vloadp_16us, \
             PVC_Vect32us: pvc_vloadp_32us, \
             PVC_Vect4i:   pvc_vloadp_4i,   \
             PVC_Vect8i:   pvc_vloadp_8i,   \
             PVC_Vect16i:  pvc_vloadp_16i,  \
             PVC_Vect4ui:  pvc_vloadp_4ui,  \
             PVC_Vect8ui:  pvc_vloadp_8ui,  \
             PVC_Vect16ui: pvc_vloadp_16ui, \
             PVC_Vect2l:   pvc_vloadp_2l,   \
             PVC_Vect4l:   pvc_vloadp_4l,   \
             PVC_Vect8l:   pvc_vloadp_8l,   \
             PVC_Vect2ul:  pvc_vloadp_2ul,  \
             PVC_Vect4ul:  pvc_vloadp_4ul,  \
             PVC_Vect8ul:  pvc_vloadp_8ul,  \
             PVC_Vect4f:   pvc_vloadp_4f,   \
             PVC_Vect8f:   pvc_vloadp_8f,   \
             PVC_Vect16f:  pvc_vloadp_16f,  \
             PVC_Vect2d:   pvc_vloadp_2d,   \
             PVC_Vect4d:   pvc_vloadp_4d,   \
             PVC_Vect8d:   pvc_vloadp_8d)(n, addr)

/**
 * @def pvc_vstore(addr, vect)
 *
 * @brief Store packed values to aligned memory.
 *
 * Store packed values @a vect into memory at address @a addr which must be
 * aligned.
 */
#define pvc_vstore(addr, vect)              \
    _Generic((vect),                        \
             PVC_Vect16c:  pvc_vstore_16c,  \
             PVC_Vect32c:  pvc_vstore_32c,  \
             PVC_Vect64c:  pvc_vstore_64c,  \
             PVC_Vect16uc: pvc_vstore_16uc, \
             PVC_Vect32uc: pvc_vstore_32uc, \
             PVC_Vect64uc: pvc_vstore_64uc, \
             PVC_Vect8s:   pvc_vstore_8s,   \
             PVC_Vect16s:  pvc_vstore_16s,  \
             PVC_Vect32s:  pvc_vstore_32s,  \
             PVC_Vect8us:  pvc_vstore_8us,  \
             PVC_Vect16us: pvc_vstore_16us, \
             PVC_Vect32us: pvc_vstore_32us, \
             PVC_Vect4i:   pvc_vstore_4i,   \
             PVC_Vect8i:   pvc_vstore_8i,   \
             PVC_Vect16i:  pvc_vstore_16i,  \
             PVC_Vect4ui:  pvc_vstore_4ui,  \
             PVC_Vect8ui:  pvc_vstore_8ui,  \
             PVC_Vect16ui: pvc_vstore_16ui, \
             PVC_Vect2l:   pvc_vstore_2l,   \
             PVC_Vect4l:   pvc_vstore_4l,   \
             PVC_Vect8l:   pvc_vstore_8l,   \
             PVC_Vect2ul:  pvc_vstore_2ul,  \
             PVC_Vect4ul:  pvc_vstore_4ul,  \
             PVC_Vect8ul:  pvc_vstore_8ul,  \
             PVC_Vect4f:   pvc_vstore_4f,   \
             PVC_Vect8f:   pvc_vstore_8f,   \
             PVC_Vect16f:  pvc_vstore_16f,  \
             PVC_Vect2d:   pvc_vstore_2d,   \
             PVC_Vect4d:   pvc_vstore_4d,   \
             PVC_Vect8d:   pvc_vstore_8d)(addr, vect)

static inline void
pvc_vstore_16c(int8_t* addr, PVC_Vect16c vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_32c(int8_t* addr, PVC_Vect32c vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstore_64c(int8_t* addr, PVC_Vect64c vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[32], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[32], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[48], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
    addr[32] = vect._pvc_val[32],
    addr[33] = vect._pvc_val[33],
    addr[34] = vect._pvc_val[34],
    addr[35] = vect._pvc_val[35],
    addr[36] = vect._pvc_val[36],
    addr[37] = vect._pvc_val[37],
    addr[38] = vect._pvc_val[38],
    addr[39] = vect._pvc_val[39],
    addr[40] = vect._pvc_val[40],
    addr[41] = vect._pvc_val[41],
    addr[42] = vect._pvc_val[42],
    addr[43] = vect._pvc_val[43],
    addr[44] = vect._pvc_val[44],
    addr[45] = vect._pvc_val[45],
    addr[46] = vect._pvc_val[46],
    addr[47] = vect._pvc_val[47],
    addr[48] = vect._pvc_val[48],
    addr[49] = vect._pvc_val[49],
    addr[50] = vect._pvc_val[50],
    addr[51] = vect._pvc_val[51],
    addr[52] = vect._pvc_val[52],
    addr[53] = vect._pvc_val[53],
    addr[54] = vect._pvc_val[54],
    addr[55] = vect._pvc_val[55],
    addr[56] = vect._pvc_val[56],
    addr[57] = vect._pvc_val[57],
    addr[58] = vect._pvc_val[58],
    addr[59] = vect._pvc_val[59],
    addr[60] = vect._pvc_val[60],
    addr[61] = vect._pvc_val[61],
    addr[62] = vect._pvc_val[62],
    addr[63] = vect._pvc_val[63],
#endif
}

static inline void
pvc_vstore_16uc(uint8_t* addr, PVC_Vect16uc vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_32uc(uint8_t* addr, PVC_Vect32uc vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstore_64uc(uint8_t* addr, PVC_Vect64uc vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[32], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[32], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[48], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
    addr[32] = vect._pvc_val[32],
    addr[33] = vect._pvc_val[33],
    addr[34] = vect._pvc_val[34],
    addr[35] = vect._pvc_val[35],
    addr[36] = vect._pvc_val[36],
    addr[37] = vect._pvc_val[37],
    addr[38] = vect._pvc_val[38],
    addr[39] = vect._pvc_val[39],
    addr[40] = vect._pvc_val[40],
    addr[41] = vect._pvc_val[41],
    addr[42] = vect._pvc_val[42],
    addr[43] = vect._pvc_val[43],
    addr[44] = vect._pvc_val[44],
    addr[45] = vect._pvc_val[45],
    addr[46] = vect._pvc_val[46],
    addr[47] = vect._pvc_val[47],
    addr[48] = vect._pvc_val[48],
    addr[49] = vect._pvc_val[49],
    addr[50] = vect._pvc_val[50],
    addr[51] = vect._pvc_val[51],
    addr[52] = vect._pvc_val[52],
    addr[53] = vect._pvc_val[53],
    addr[54] = vect._pvc_val[54],
    addr[55] = vect._pvc_val[55],
    addr[56] = vect._pvc_val[56],
    addr[57] = vect._pvc_val[57],
    addr[58] = vect._pvc_val[58],
    addr[59] = vect._pvc_val[59],
    addr[60] = vect._pvc_val[60],
    addr[61] = vect._pvc_val[61],
    addr[62] = vect._pvc_val[62],
    addr[63] = vect._pvc_val[63],
#endif
}

static inline void
pvc_vstore_8s(int16_t* addr, PVC_Vect8s vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_16s(int16_t* addr, PVC_Vect16s vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_32s(int16_t* addr, PVC_Vect32s vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[16], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[24], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstore_8us(uint16_t* addr, PVC_Vect8us vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_16us(uint16_t* addr, PVC_Vect16us vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_32us(uint16_t* addr, PVC_Vect32us vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[16], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[16], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[24], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstore_4i(int32_t* addr, PVC_Vect4i vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8i(int32_t* addr, PVC_Vect8i vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_16i(int32_t* addr, PVC_Vect16i vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_4ui(uint32_t* addr, PVC_Vect4ui vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8ui(uint32_t* addr, PVC_Vect8ui vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_16ui(uint32_t* addr, PVC_Vect16ui vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[8], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_2l(int64_t* addr, PVC_Vect2l vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstore_4l(int64_t* addr, PVC_Vect4l vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8l(int64_t* addr, PVC_Vect8l vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[2], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_2ul(uint64_t* addr, PVC_Vect2ul vect)
{
#if defined(__SSE2__)
    _mm_store_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstore_4ul(uint64_t* addr, PVC_Vect4ul vect)
{
#if defined(__AVX__)
    _mm256_store_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8ul(uint64_t* addr, PVC_Vect8ul vect)
{
#if defined(__AVX512F__)
    _mm512_store_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_si256(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_store_si128(&addr[2], vect._pvc_xmm[1]),
    _mm_store_si128(&addr[4], vect._pvc_xmm[2]),
    _mm_store_si128(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_4f(float* addr, PVC_Vect4f vect)
{
#if defined(__SSE__)
    _mm_store_ps(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8f(float* addr, PVC_Vect8f vect)
{
#if defined(__AVX__)
    _mm256_store_ps(addr, vect._pvc_ymm),
#elif defined(__SSE__)
    _mm_store_ps(&addr[0], vect._pvc_xmm[0]),
    _mm_store_ps(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstore_16f(float* addr, PVC_Vect16f vect)
{
#if defined(__AVX512F__)
    _mm512_store_ps(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_ps(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_ps(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE__)
    _mm_store_ps(&addr[0], vect._pvc_xmm[0]),
    _mm_store_ps(&addr[4], vect._pvc_xmm[1]),
    _mm_store_ps(&addr[8], vect._pvc_xmm[2]),
    _mm_store_ps(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstore_2d(double* addr, PVC_Vect2d vect)
{
#if defined(__SSE2__)
    _mm_store_pd(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstore_4d(double* addr, PVC_Vect4d vect)
{
#if defined(__AVX__)
    _mm256_store_pd(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_store_pd(&addr[0], vect._pvc_xmm[0]),
    _mm_store_pd(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstore_8d(double* addr, PVC_Vect8d vect)
{
#if defined(__AVX512F__)
    _mm512_store_pd(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_store_pd(&addr[0], vect._pvc_ymm[0]),
    _mm256_store_pd(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_store_pd(&addr[0], vect._pvc_xmm[0]),
    _mm_store_pd(&addr[2], vect._pvc_xmm[1]),
    _mm_store_pd(&addr[4], vect._pvc_xmm[2]),
    _mm_store_pd(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

/**
 * @def pvc_vstoreu(addr, vect)
 *
 * @brief Store packed values to memory.
 *
 * Store packed values @a vect into memory at address @a addr which may not be
 * aligned.
 */
#define pvc_vstoreu(addr, vect)              \
    _Generic((vect),                         \
             PVC_Vect16c:  pvc_vstoreu_16c,  \
             PVC_Vect32c:  pvc_vstoreu_32c,  \
             PVC_Vect64c:  pvc_vstoreu_64c,  \
             PVC_Vect16uc: pvc_vstoreu_16uc, \
             PVC_Vect32uc: pvc_vstoreu_32uc, \
             PVC_Vect64uc: pvc_vstoreu_64uc, \
             PVC_Vect8s:   pvc_vstoreu_8s,   \
             PVC_Vect16s:  pvc_vstoreu_16s,  \
             PVC_Vect32s:  pvc_vstoreu_32s,  \
             PVC_Vect8us:  pvc_vstoreu_8us,  \
             PVC_Vect16us: pvc_vstoreu_16us, \
             PVC_Vect32us: pvc_vstoreu_32us, \
             PVC_Vect4i:   pvc_vstoreu_4i,   \
             PVC_Vect8i:   pvc_vstoreu_8i,   \
             PVC_Vect16i:  pvc_vstoreu_16i,  \
             PVC_Vect4ui:  pvc_vstoreu_4ui,  \
             PVC_Vect8ui:  pvc_vstoreu_8ui,  \
             PVC_Vect16ui: pvc_vstoreu_16ui, \
             PVC_Vect2l:   pvc_vstoreu_2l,   \
             PVC_Vect4l:   pvc_vstoreu_4l,   \
             PVC_Vect8l:   pvc_vstoreu_8l,   \
             PVC_Vect2ul:  pvc_vstoreu_2ul,  \
             PVC_Vect4ul:  pvc_vstoreu_4ul,  \
             PVC_Vect8ul:  pvc_vstoreu_8ul,  \
             PVC_Vect4f:   pvc_vstoreu_4f,   \
             PVC_Vect8f:   pvc_vstoreu_8f,   \
             PVC_Vect16f:  pvc_vstoreu_16f,  \
             PVC_Vect2d:   pvc_vstoreu_2d,   \
             PVC_Vect4d:   pvc_vstoreu_4d,   \
             PVC_Vect8d:   pvc_vstoreu_8d)(addr, vect)

static inline void
pvc_vstoreu_16c(int8_t* addr, PVC_Vect16c vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_32c(int8_t* addr, PVC_Vect32c vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstoreu_64c(int8_t* addr, PVC_Vect64c vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[32], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[32], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[48], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
    addr[32] = vect._pvc_val[32],
    addr[33] = vect._pvc_val[33],
    addr[34] = vect._pvc_val[34],
    addr[35] = vect._pvc_val[35],
    addr[36] = vect._pvc_val[36],
    addr[37] = vect._pvc_val[37],
    addr[38] = vect._pvc_val[38],
    addr[39] = vect._pvc_val[39],
    addr[40] = vect._pvc_val[40],
    addr[41] = vect._pvc_val[41],
    addr[42] = vect._pvc_val[42],
    addr[43] = vect._pvc_val[43],
    addr[44] = vect._pvc_val[44],
    addr[45] = vect._pvc_val[45],
    addr[46] = vect._pvc_val[46],
    addr[47] = vect._pvc_val[47],
    addr[48] = vect._pvc_val[48],
    addr[49] = vect._pvc_val[49],
    addr[50] = vect._pvc_val[50],
    addr[51] = vect._pvc_val[51],
    addr[52] = vect._pvc_val[52],
    addr[53] = vect._pvc_val[53],
    addr[54] = vect._pvc_val[54],
    addr[55] = vect._pvc_val[55],
    addr[56] = vect._pvc_val[56],
    addr[57] = vect._pvc_val[57],
    addr[58] = vect._pvc_val[58],
    addr[59] = vect._pvc_val[59],
    addr[60] = vect._pvc_val[60],
    addr[61] = vect._pvc_val[61],
    addr[62] = vect._pvc_val[62],
    addr[63] = vect._pvc_val[63],
#endif
}

static inline void
pvc_vstoreu_16uc(uint8_t* addr, PVC_Vect16uc vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_32uc(uint8_t* addr, PVC_Vect32uc vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstoreu_64uc(uint8_t* addr, PVC_Vect64uc vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[32], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[32], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[48], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
    addr[32] = vect._pvc_val[32],
    addr[33] = vect._pvc_val[33],
    addr[34] = vect._pvc_val[34],
    addr[35] = vect._pvc_val[35],
    addr[36] = vect._pvc_val[36],
    addr[37] = vect._pvc_val[37],
    addr[38] = vect._pvc_val[38],
    addr[39] = vect._pvc_val[39],
    addr[40] = vect._pvc_val[40],
    addr[41] = vect._pvc_val[41],
    addr[42] = vect._pvc_val[42],
    addr[43] = vect._pvc_val[43],
    addr[44] = vect._pvc_val[44],
    addr[45] = vect._pvc_val[45],
    addr[46] = vect._pvc_val[46],
    addr[47] = vect._pvc_val[47],
    addr[48] = vect._pvc_val[48],
    addr[49] = vect._pvc_val[49],
    addr[50] = vect._pvc_val[50],
    addr[51] = vect._pvc_val[51],
    addr[52] = vect._pvc_val[52],
    addr[53] = vect._pvc_val[53],
    addr[54] = vect._pvc_val[54],
    addr[55] = vect._pvc_val[55],
    addr[56] = vect._pvc_val[56],
    addr[57] = vect._pvc_val[57],
    addr[58] = vect._pvc_val[58],
    addr[59] = vect._pvc_val[59],
    addr[60] = vect._pvc_val[60],
    addr[61] = vect._pvc_val[61],
    addr[62] = vect._pvc_val[62],
    addr[63] = vect._pvc_val[63],
#endif
}

static inline void
pvc_vstoreu_8s(int16_t* addr, PVC_Vect8s vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_16s(int16_t* addr, PVC_Vect16s vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_32s(int16_t* addr, PVC_Vect32s vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[16], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[24], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstoreu_8us(uint16_t* addr, PVC_Vect8us vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_16us(uint16_t* addr, PVC_Vect16us vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_32us(uint16_t* addr, PVC_Vect32us vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[16], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[16], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[24], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
    addr[16] = vect._pvc_val[16],
    addr[17] = vect._pvc_val[17],
    addr[18] = vect._pvc_val[18],
    addr[19] = vect._pvc_val[19],
    addr[20] = vect._pvc_val[20],
    addr[21] = vect._pvc_val[21],
    addr[22] = vect._pvc_val[22],
    addr[23] = vect._pvc_val[23],
    addr[24] = vect._pvc_val[24],
    addr[25] = vect._pvc_val[25],
    addr[26] = vect._pvc_val[26],
    addr[27] = vect._pvc_val[27],
    addr[28] = vect._pvc_val[28],
    addr[29] = vect._pvc_val[29],
    addr[30] = vect._pvc_val[30],
    addr[31] = vect._pvc_val[31],
#endif
}

static inline void
pvc_vstoreu_4i(int32_t* addr, PVC_Vect4i vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8i(int32_t* addr, PVC_Vect8i vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_16i(int32_t* addr, PVC_Vect16i vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_4ui(uint32_t* addr, PVC_Vect4ui vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8ui(uint32_t* addr, PVC_Vect8ui vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_16ui(uint32_t* addr, PVC_Vect16ui vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[8], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_2l(int64_t* addr, PVC_Vect2l vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstoreu_4l(int64_t* addr, PVC_Vect4l vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8l(int64_t* addr, PVC_Vect8l vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[2], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_2ul(uint64_t* addr, PVC_Vect2ul vect)
{
#if defined(__SSE2__)
    _mm_storeu_si128(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstoreu_4ul(uint64_t* addr, PVC_Vect4ul vect)
{
#if defined(__AVX__)
    _mm256_storeu_si256(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8ul(uint64_t* addr, PVC_Vect8ul vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_si512(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_si256(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_si256(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_si128(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_si128(&addr[2], vect._pvc_xmm[1]),
    _mm_storeu_si128(&addr[4], vect._pvc_xmm[2]),
    _mm_storeu_si128(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_4f(float* addr, PVC_Vect4f vect)
{
#if defined(__SSE__)
    _mm_storeu_ps(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8f(float* addr, PVC_Vect8f vect)
{
#if defined(__AVX__)
    _mm256_storeu_ps(addr, vect._pvc_ymm),
#elif defined(__SSE__)
    _mm_storeu_ps(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_ps(&addr[4], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

static inline void
pvc_vstoreu_16f(float* addr, PVC_Vect16f vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_ps(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_ps(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_ps(&addr[8], vect._pvc_ymm[1]),
#elif defined(__SSE__)
    _mm_storeu_ps(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_ps(&addr[4], vect._pvc_xmm[1]),
    _mm_storeu_ps(&addr[8], vect._pvc_xmm[2]),
    _mm_storeu_ps(&addr[12], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
    addr[8] = vect._pvc_val[8],
    addr[9] = vect._pvc_val[9],
    addr[10] = vect._pvc_val[10],
    addr[11] = vect._pvc_val[11],
    addr[12] = vect._pvc_val[12],
    addr[13] = vect._pvc_val[13],
    addr[14] = vect._pvc_val[14],
    addr[15] = vect._pvc_val[15],
#endif
}

static inline void
pvc_vstoreu_2d(double* addr, PVC_Vect2d vect)
{
#if defined(__SSE2__)
    _mm_storeu_pd(addr, vect._pvc_xmm),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
#endif
}

static inline void
pvc_vstoreu_4d(double* addr, PVC_Vect4d vect)
{
#if defined(__AVX__)
    _mm256_storeu_pd(addr, vect._pvc_ymm),
#elif defined(__SSE2__)
    _mm_storeu_pd(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_pd(&addr[2], vect._pvc_xmm[1]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
#endif
}

static inline void
pvc_vstoreu_8d(double* addr, PVC_Vect8d vect)
{
#if defined(__AVX512F__)
    _mm512_storeu_pd(addr, vect._pvc_zmm),
#elif defined(__AVX__)
    _mm256_storeu_pd(&addr[0], vect._pvc_ymm[0]),
    _mm256_storeu_pd(&addr[4], vect._pvc_ymm[1]),
#elif defined(__SSE2__)
    _mm_storeu_pd(&addr[0], vect._pvc_xmm[0]),
    _mm_storeu_pd(&addr[2], vect._pvc_xmm[1]),
    _mm_storeu_pd(&addr[4], vect._pvc_xmm[2]),
    _mm_storeu_pd(&addr[6], vect._pvc_xmm[3]),
#else
    addr[0] = vect._pvc_val[0],
    addr[1] = vect._pvc_val[1],
    addr[2] = vect._pvc_val[2],
    addr[3] = vect._pvc_val[3],
    addr[4] = vect._pvc_val[4],
    addr[5] = vect._pvc_val[5],
    addr[6] = vect._pvc_val[6],
    addr[7] = vect._pvc_val[7],
#endif
}

/**
 * @def pvc_vstorep(addr, n, vect)
 *
 * @brief Partial store of packed values to memory.
 *
 * Store the @a n first values of @a vect to memory at address @a addr which may not be
 * aligned.
 */
#define pvc_vstorep(addr, n, vect)           \
    _Generic((vect),                         \
             PVC_Vect16c:  pvc_vstorep_16c,  \
             PVC_Vect32c:  pvc_vstorep_32c,  \
             PVC_Vect64c:  pvc_vstorep_64c,  \
             PVC_Vect16uc: pvc_vstorep_16uc, \
             PVC_Vect32uc: pvc_vstorep_32uc, \
             PVC_Vect64uc: pvc_vstorep_64uc, \
             PVC_Vect8s:   pvc_vstorep_8s,   \
             PVC_Vect16s:  pvc_vstorep_16s,  \
             PVC_Vect32s:  pvc_vstorep_32s,  \
             PVC_Vect8us:  pvc_vstorep_8us,  \
             PVC_Vect16us: pvc_vstorep_16us, \
             PVC_Vect32us: pvc_vstorep_32us, \
             PVC_Vect4i:   pvc_vstorep_4i,   \
             PVC_Vect8i:   pvc_vstorep_8i,   \
             PVC_Vect16i:  pvc_vstorep_16i,  \
             PVC_Vect4ui:  pvc_vstorep_4ui,  \
             PVC_Vect8ui:  pvc_vstorep_8ui,  \
             PVC_Vect16ui: pvc_vstorep_16ui, \
             PVC_Vect2l:   pvc_vstorep_2l,   \
             PVC_Vect4l:   pvc_vstorep_4l,   \
             PVC_Vect8l:   pvc_vstorep_8l,   \
             PVC_Vect2ul:  pvc_vstorep_2ul,  \
             PVC_Vect4ul:  pvc_vstorep_4ul,  \
             PVC_Vect8ul:  pvc_vstorep_8ul,  \
             PVC_Vect4f:   pvc_vstorep_4f,   \
             PVC_Vect8f:   pvc_vstorep_8f,   \
             PVC_Vect16f:  pvc_vstorep_16f,  \
             PVC_Vect2d:   pvc_vstorep_2d,   \
             PVC_Vect4d:   pvc_vstorep_4d,   \
             PVC_Vect8d:   pvc_vstorep_8d)(addr, n, vect)

/**
 * @def c = pvc_vadd(a, b)
 *
 * @brief Add packed values.
 */
#define pvc_vadd(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vadd_16c,  \
             PVC_Vect32c:  pvc_vadd_32c,  \
             PVC_Vect64c:  pvc_vadd_64c,  \
             PVC_Vect16uc: pvc_vadd_16uc, \
             PVC_Vect32uc: pvc_vadd_32uc, \
             PVC_Vect64uc: pvc_vadd_64uc, \
             PVC_Vect8s:   pvc_vadd_8s,   \
             PVC_Vect16s:  pvc_vadd_16s,  \
             PVC_Vect32s:  pvc_vadd_32s,  \
             PVC_Vect8us:  pvc_vadd_8us,  \
             PVC_Vect16us: pvc_vadd_16us, \
             PVC_Vect32us: pvc_vadd_32us, \
             PVC_Vect4i:   pvc_vadd_4i,   \
             PVC_Vect8i:   pvc_vadd_8i,   \
             PVC_Vect16i:  pvc_vadd_16i,  \
             PVC_Vect4ui:  pvc_vadd_4ui,  \
             PVC_Vect8ui:  pvc_vadd_8ui,  \
             PVC_Vect16ui: pvc_vadd_16ui, \
             PVC_Vect2l:   pvc_vadd_2l,   \
             PVC_Vect4l:   pvc_vadd_4l,   \
             PVC_Vect8l:   pvc_vadd_8l,   \
             PVC_Vect2ul:  pvc_vadd_2ul,  \
             PVC_Vect4ul:  pvc_vadd_4ul,  \
             PVC_Vect8ul:  pvc_vadd_8ul,  \
             PVC_Vect4f:   pvc_vadd_4f,   \
             PVC_Vect8f:   pvc_vadd_8f,   \
             PVC_Vect16f:  pvc_vadd_16f,  \
             PVC_Vect2d:   pvc_vadd_2d,   \
             PVC_Vect4d:   pvc_vadd_4d,   \
             PVC_Vect8d:   pvc_vadd_8d)(a, b)

static inline PVC_Vect16c
pvc_vadd_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_add_epi8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect32c
pvc_vadd_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_add_epi8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
#endif
    };
}

static inline PVC_Vect64c
pvc_vadd_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_add_epi8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_add_epi8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_epi8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_epi8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_epi8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] + b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] + b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] + b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] + b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] + b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] + b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] + b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] + b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] + b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] + b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] + b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] + b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] + b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] + b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] + b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] + b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] + b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] + b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] + b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] + b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] + b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] + b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] + b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] + b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] + b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] + b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] + b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] + b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] + b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] + b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] + b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] + b._pvc_val[63],
#endif
    };
}

static inline PVC_Vect16uc
pvc_vadd_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
    };
}

static inline PVC_Vect32uc
pvc_vadd_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
    };
}

static inline PVC_Vect64uc
pvc_vadd_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] + b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] + b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] + b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] + b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] + b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] + b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] + b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] + b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] + b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] + b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] + b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] + b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] + b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] + b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] + b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] + b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] + b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] + b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] + b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] + b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] + b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] + b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] + b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] + b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] + b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] + b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] + b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] + b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] + b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] + b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] + b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] + b._pvc_val[63],
    };
}

static inline PVC_Vect8s
pvc_vadd_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_add_epi16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16s
pvc_vadd_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_add_epi16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect32s
pvc_vadd_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_add_epi16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_add_epi16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_epi16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_epi16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_epi16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
#endif
    };
}

static inline PVC_Vect8us
pvc_vadd_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
    };
}

static inline PVC_Vect16us
pvc_vadd_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
    };
}

static inline PVC_Vect32us
pvc_vadd_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] + b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] + b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] + b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] + b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] + b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] + b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] + b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] + b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] + b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] + b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] + b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] + b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] + b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] + b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] + b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] + b._pvc_val[31],
    };
}

static inline PVC_Vect4i
pvc_vadd_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_add_epi32(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8i
pvc_vadd_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_add_epi32(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16i
pvc_vadd_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_add_epi32(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_add_epi32(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_epi32(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_epi32(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_epi32(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect4ui
pvc_vadd_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
    };
}

static inline PVC_Vect8ui
pvc_vadd_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
    };
}

static inline PVC_Vect16ui
pvc_vadd_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
    };
}

static inline PVC_Vect2l
pvc_vadd_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_add_epi64(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4l
pvc_vadd_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_add_epi64(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8l
pvc_vadd_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_add_epi64(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_add_epi64(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_epi64(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_epi64(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_epi64(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect2ul
pvc_vadd_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
    };
}

static inline PVC_Vect4ul
pvc_vadd_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
    };
}

static inline PVC_Vect8ul
pvc_vadd_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
    };
}

static inline PVC_Vect4f
pvc_vadd_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_add_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vadd_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_add_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_add_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vadd_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_add_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_add_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_add_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] + b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] + b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] + b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] + b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] + b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] + b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] + b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] + b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vadd_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_add_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vadd_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_add_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vadd_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_add_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_add_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_add_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_add_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_add_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_add_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_add_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] + b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] + b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] + b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] + b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] + b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] + b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] + b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] + b._pvc_val[7],
#endif
    };
}

/**
 * @def c = pvc_vsub(a, b)
 *
 * @brief Subtract packed values.
 */
#define pvc_vsub(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vsub_16c,  \
             PVC_Vect32c:  pvc_vsub_32c,  \
             PVC_Vect64c:  pvc_vsub_64c,  \
             PVC_Vect16uc: pvc_vsub_16uc, \
             PVC_Vect32uc: pvc_vsub_32uc, \
             PVC_Vect64uc: pvc_vsub_64uc, \
             PVC_Vect8s:   pvc_vsub_8s,   \
             PVC_Vect16s:  pvc_vsub_16s,  \
             PVC_Vect32s:  pvc_vsub_32s,  \
             PVC_Vect8us:  pvc_vsub_8us,  \
             PVC_Vect16us: pvc_vsub_16us, \
             PVC_Vect32us: pvc_vsub_32us, \
             PVC_Vect4i:   pvc_vsub_4i,   \
             PVC_Vect8i:   pvc_vsub_8i,   \
             PVC_Vect16i:  pvc_vsub_16i,  \
             PVC_Vect4ui:  pvc_vsub_4ui,  \
             PVC_Vect8ui:  pvc_vsub_8ui,  \
             PVC_Vect16ui: pvc_vsub_16ui, \
             PVC_Vect2l:   pvc_vsub_2l,   \
             PVC_Vect4l:   pvc_vsub_4l,   \
             PVC_Vect8l:   pvc_vsub_8l,   \
             PVC_Vect2ul:  pvc_vsub_2ul,  \
             PVC_Vect4ul:  pvc_vsub_4ul,  \
             PVC_Vect8ul:  pvc_vsub_8ul,  \
             PVC_Vect4f:   pvc_vsub_4f,   \
             PVC_Vect8f:   pvc_vsub_8f,   \
             PVC_Vect16f:  pvc_vsub_16f,  \
             PVC_Vect2d:   pvc_vsub_2d,   \
             PVC_Vect4d:   pvc_vsub_4d,   \
             PVC_Vect8d:   pvc_vsub_8d)(a, b)

static inline PVC_Vect16c
pvc_vsub_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_sub_epi8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect32c
pvc_vsub_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_sub_epi8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
#endif
    };
}

static inline PVC_Vect64c
pvc_vsub_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_sub_epi8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_sub_epi8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_epi8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_epi8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_epi8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] - b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] - b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] - b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] - b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] - b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] - b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] - b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] - b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] - b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] - b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] - b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] - b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] - b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] - b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] - b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] - b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] - b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] - b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] - b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] - b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] - b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] - b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] - b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] - b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] - b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] - b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] - b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] - b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] - b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] - b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] - b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] - b._pvc_val[63],
#endif
    };
}

static inline PVC_Vect16uc
pvc_vsub_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
    };
}

static inline PVC_Vect32uc
pvc_vsub_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
    };
}

static inline PVC_Vect64uc
pvc_vsub_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] - b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] - b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] - b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] - b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] - b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] - b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] - b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] - b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] - b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] - b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] - b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] - b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] - b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] - b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] - b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] - b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] - b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] - b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] - b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] - b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] - b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] - b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] - b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] - b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] - b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] - b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] - b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] - b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] - b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] - b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] - b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] - b._pvc_val[63],
    };
}

static inline PVC_Vect8s
pvc_vsub_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_sub_epi16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16s
pvc_vsub_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_sub_epi16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect32s
pvc_vsub_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_sub_epi16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_sub_epi16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_epi16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_epi16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_epi16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
#endif
    };
}

static inline PVC_Vect8us
pvc_vsub_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
    };
}

static inline PVC_Vect16us
pvc_vsub_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
    };
}

static inline PVC_Vect32us
pvc_vsub_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] - b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] - b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] - b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] - b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] - b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] - b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] - b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] - b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] - b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] - b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] - b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] - b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] - b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] - b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] - b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] - b._pvc_val[31],
    };
}

static inline PVC_Vect4i
pvc_vsub_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_sub_epi32(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8i
pvc_vsub_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_sub_epi32(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16i
pvc_vsub_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_sub_epi32(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_sub_epi32(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_epi32(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_epi32(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_epi32(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect4ui
pvc_vsub_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
    };
}

static inline PVC_Vect8ui
pvc_vsub_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
    };
}

static inline PVC_Vect16ui
pvc_vsub_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
    };
}

static inline PVC_Vect2l
pvc_vsub_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_sub_epi64(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4l
pvc_vsub_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_sub_epi64(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8l
pvc_vsub_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_sub_epi64(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_sub_epi64(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_epi64(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_epi64(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_epi64(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect2ul
pvc_vsub_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
    };
}

static inline PVC_Vect4ul
pvc_vsub_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
    };
}

static inline PVC_Vect8ul
pvc_vsub_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
    };
}

static inline PVC_Vect4f
pvc_vsub_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_sub_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vsub_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_sub_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_sub_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vsub_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_sub_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_sub_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_sub_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] - b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] - b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] - b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] - b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] - b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] - b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] - b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] - b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vsub_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_sub_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vsub_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_sub_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vsub_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_sub_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_sub_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_sub_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_sub_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_sub_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_sub_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_sub_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] - b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] - b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] - b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] - b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] - b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] - b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] - b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] - b._pvc_val[7],
#endif
    };
}

/**
 * @def c = pvc_vmul(a, b)
 *
 * @brief Multiply packed values.
 */
#define pvc_vmul(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vmul_16c,  \
             PVC_Vect32c:  pvc_vmul_32c,  \
             PVC_Vect64c:  pvc_vmul_64c,  \
             PVC_Vect16uc: pvc_vmul_16uc, \
             PVC_Vect32uc: pvc_vmul_32uc, \
             PVC_Vect64uc: pvc_vmul_64uc, \
             PVC_Vect8s:   pvc_vmul_8s,   \
             PVC_Vect16s:  pvc_vmul_16s,  \
             PVC_Vect32s:  pvc_vmul_32s,  \
             PVC_Vect8us:  pvc_vmul_8us,  \
             PVC_Vect16us: pvc_vmul_16us, \
             PVC_Vect32us: pvc_vmul_32us, \
             PVC_Vect4i:   pvc_vmul_4i,   \
             PVC_Vect8i:   pvc_vmul_8i,   \
             PVC_Vect16i:  pvc_vmul_16i,  \
             PVC_Vect4ui:  pvc_vmul_4ui,  \
             PVC_Vect8ui:  pvc_vmul_8ui,  \
             PVC_Vect16ui: pvc_vmul_16ui, \
             PVC_Vect2l:   pvc_vmul_2l,   \
             PVC_Vect4l:   pvc_vmul_4l,   \
             PVC_Vect8l:   pvc_vmul_8l,   \
             PVC_Vect2ul:  pvc_vmul_2ul,  \
             PVC_Vect4ul:  pvc_vmul_4ul,  \
             PVC_Vect8ul:  pvc_vmul_8ul,  \
             PVC_Vect4f:   pvc_vmul_4f,   \
             PVC_Vect8f:   pvc_vmul_8f,   \
             PVC_Vect16f:  pvc_vmul_16f,  \
             PVC_Vect2d:   pvc_vmul_2d,   \
             PVC_Vect4d:   pvc_vmul_4d,   \
             PVC_Vect8d:   pvc_vmul_8d)(a, b)

static inline PVC_Vect16c
pvc_vmul_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
    };
}

static inline PVC_Vect32c
pvc_vmul_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
    };
}

static inline PVC_Vect64c
pvc_vmul_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] * b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] * b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] * b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] * b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] * b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] * b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] * b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] * b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] * b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] * b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] * b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] * b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] * b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] * b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] * b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] * b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] * b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] * b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] * b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] * b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] * b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] * b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] * b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] * b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] * b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] * b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] * b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] * b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] * b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] * b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] * b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] * b._pvc_val[63],
    };
}

static inline PVC_Vect16uc
pvc_vmul_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
    };
}

static inline PVC_Vect32uc
pvc_vmul_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
    };
}

static inline PVC_Vect64uc
pvc_vmul_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] * b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] * b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] * b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] * b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] * b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] * b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] * b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] * b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] * b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] * b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] * b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] * b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] * b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] * b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] * b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] * b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] * b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] * b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] * b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] * b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] * b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] * b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] * b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] * b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] * b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] * b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] * b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] * b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] * b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] * b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] * b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] * b._pvc_val[63],
    };
}

static inline PVC_Vect8s
pvc_vmul_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
    };
}

static inline PVC_Vect16s
pvc_vmul_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
    };
}

static inline PVC_Vect32s
pvc_vmul_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
    };
}

static inline PVC_Vect8us
pvc_vmul_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
    };
}

static inline PVC_Vect16us
pvc_vmul_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
    };
}

static inline PVC_Vect32us
pvc_vmul_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] * b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] * b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] * b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] * b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] * b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] * b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] * b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] * b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] * b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] * b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] * b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] * b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] * b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] * b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] * b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] * b._pvc_val[31],
    };
}

static inline PVC_Vect4i
pvc_vmul_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
    };
}

static inline PVC_Vect8i
pvc_vmul_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_mul_epi32(a._pvc_ymm, b._pvc_ymm),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16i
pvc_vmul_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_mul_epi32(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_mul_epi32(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_mul_epi32(a._pvc_ymm[1], b._pvc_ymm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect4ui
pvc_vmul_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
    };
}

static inline PVC_Vect8ui
pvc_vmul_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
    };
}

static inline PVC_Vect16ui
pvc_vmul_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
    };
}

static inline PVC_Vect2l
pvc_vmul_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
    };
}

static inline PVC_Vect4l
pvc_vmul_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
    };
}

static inline PVC_Vect8l
pvc_vmul_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
    };
}

static inline PVC_Vect2ul
pvc_vmul_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
    };
}

static inline PVC_Vect4ul
pvc_vmul_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
    };
}

static inline PVC_Vect8ul
pvc_vmul_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
    };
}

static inline PVC_Vect4f
pvc_vmul_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_mul_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vmul_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_mul_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_mul_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_mul_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vmul_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_mul_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_mul_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_mul_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_mul_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_mul_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_mul_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_mul_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] * b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] * b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] * b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] * b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] * b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] * b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] * b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] * b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vmul_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_mul_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vmul_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_mul_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_mul_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_mul_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vmul_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_mul_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_mul_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_mul_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_mul_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_mul_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_mul_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_mul_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] * b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] * b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] * b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] * b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] * b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] * b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] * b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] * b._pvc_val[7],
#endif
    };
}

/**
 * @def c = pvc_vdiv(a, b)
 *
 * @brief Divide packed values.
 */
#define pvc_vdiv(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vdiv_16c,  \
             PVC_Vect32c:  pvc_vdiv_32c,  \
             PVC_Vect64c:  pvc_vdiv_64c,  \
             PVC_Vect16uc: pvc_vdiv_16uc, \
             PVC_Vect32uc: pvc_vdiv_32uc, \
             PVC_Vect64uc: pvc_vdiv_64uc, \
             PVC_Vect8s:   pvc_vdiv_8s,   \
             PVC_Vect16s:  pvc_vdiv_16s,  \
             PVC_Vect32s:  pvc_vdiv_32s,  \
             PVC_Vect8us:  pvc_vdiv_8us,  \
             PVC_Vect16us: pvc_vdiv_16us, \
             PVC_Vect32us: pvc_vdiv_32us, \
             PVC_Vect4i:   pvc_vdiv_4i,   \
             PVC_Vect8i:   pvc_vdiv_8i,   \
             PVC_Vect16i:  pvc_vdiv_16i,  \
             PVC_Vect4ui:  pvc_vdiv_4ui,  \
             PVC_Vect8ui:  pvc_vdiv_8ui,  \
             PVC_Vect16ui: pvc_vdiv_16ui, \
             PVC_Vect2l:   pvc_vdiv_2l,   \
             PVC_Vect4l:   pvc_vdiv_4l,   \
             PVC_Vect8l:   pvc_vdiv_8l,   \
             PVC_Vect2ul:  pvc_vdiv_2ul,  \
             PVC_Vect4ul:  pvc_vdiv_4ul,  \
             PVC_Vect8ul:  pvc_vdiv_8ul,  \
             PVC_Vect4f:   pvc_vdiv_4f,   \
             PVC_Vect8f:   pvc_vdiv_8f,   \
             PVC_Vect16f:  pvc_vdiv_16f,  \
             PVC_Vect2d:   pvc_vdiv_2d,   \
             PVC_Vect4d:   pvc_vdiv_4d,   \
             PVC_Vect8d:   pvc_vdiv_8d)(a, b)

static inline PVC_Vect16c
pvc_vdiv_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect32c
pvc_vdiv_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
    };
}

static inline PVC_Vect64c
pvc_vdiv_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] / b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] / b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] / b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] / b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] / b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] / b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] / b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] / b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] / b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] / b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] / b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] / b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] / b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] / b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] / b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] / b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] / b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] / b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] / b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] / b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] / b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] / b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] / b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] / b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] / b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] / b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] / b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] / b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] / b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] / b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] / b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] / b._pvc_val[63],
    };
}

static inline PVC_Vect16uc
pvc_vdiv_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect32uc
pvc_vdiv_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
    };
}

static inline PVC_Vect64uc
pvc_vdiv_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
        ._pvc_val[32] = a._pvc_val[32] / b._pvc_val[32],
        ._pvc_val[33] = a._pvc_val[33] / b._pvc_val[33],
        ._pvc_val[34] = a._pvc_val[34] / b._pvc_val[34],
        ._pvc_val[35] = a._pvc_val[35] / b._pvc_val[35],
        ._pvc_val[36] = a._pvc_val[36] / b._pvc_val[36],
        ._pvc_val[37] = a._pvc_val[37] / b._pvc_val[37],
        ._pvc_val[38] = a._pvc_val[38] / b._pvc_val[38],
        ._pvc_val[39] = a._pvc_val[39] / b._pvc_val[39],
        ._pvc_val[40] = a._pvc_val[40] / b._pvc_val[40],
        ._pvc_val[41] = a._pvc_val[41] / b._pvc_val[41],
        ._pvc_val[42] = a._pvc_val[42] / b._pvc_val[42],
        ._pvc_val[43] = a._pvc_val[43] / b._pvc_val[43],
        ._pvc_val[44] = a._pvc_val[44] / b._pvc_val[44],
        ._pvc_val[45] = a._pvc_val[45] / b._pvc_val[45],
        ._pvc_val[46] = a._pvc_val[46] / b._pvc_val[46],
        ._pvc_val[47] = a._pvc_val[47] / b._pvc_val[47],
        ._pvc_val[48] = a._pvc_val[48] / b._pvc_val[48],
        ._pvc_val[49] = a._pvc_val[49] / b._pvc_val[49],
        ._pvc_val[50] = a._pvc_val[50] / b._pvc_val[50],
        ._pvc_val[51] = a._pvc_val[51] / b._pvc_val[51],
        ._pvc_val[52] = a._pvc_val[52] / b._pvc_val[52],
        ._pvc_val[53] = a._pvc_val[53] / b._pvc_val[53],
        ._pvc_val[54] = a._pvc_val[54] / b._pvc_val[54],
        ._pvc_val[55] = a._pvc_val[55] / b._pvc_val[55],
        ._pvc_val[56] = a._pvc_val[56] / b._pvc_val[56],
        ._pvc_val[57] = a._pvc_val[57] / b._pvc_val[57],
        ._pvc_val[58] = a._pvc_val[58] / b._pvc_val[58],
        ._pvc_val[59] = a._pvc_val[59] / b._pvc_val[59],
        ._pvc_val[60] = a._pvc_val[60] / b._pvc_val[60],
        ._pvc_val[61] = a._pvc_val[61] / b._pvc_val[61],
        ._pvc_val[62] = a._pvc_val[62] / b._pvc_val[62],
        ._pvc_val[63] = a._pvc_val[63] / b._pvc_val[63],
    };
}

static inline PVC_Vect8s
pvc_vdiv_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect16s
pvc_vdiv_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect32s
pvc_vdiv_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
    };
}

static inline PVC_Vect8us
pvc_vdiv_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect16us
pvc_vdiv_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect32us
pvc_vdiv_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
        ._pvc_val[16] = a._pvc_val[16] / b._pvc_val[16],
        ._pvc_val[17] = a._pvc_val[17] / b._pvc_val[17],
        ._pvc_val[18] = a._pvc_val[18] / b._pvc_val[18],
        ._pvc_val[19] = a._pvc_val[19] / b._pvc_val[19],
        ._pvc_val[20] = a._pvc_val[20] / b._pvc_val[20],
        ._pvc_val[21] = a._pvc_val[21] / b._pvc_val[21],
        ._pvc_val[22] = a._pvc_val[22] / b._pvc_val[22],
        ._pvc_val[23] = a._pvc_val[23] / b._pvc_val[23],
        ._pvc_val[24] = a._pvc_val[24] / b._pvc_val[24],
        ._pvc_val[25] = a._pvc_val[25] / b._pvc_val[25],
        ._pvc_val[26] = a._pvc_val[26] / b._pvc_val[26],
        ._pvc_val[27] = a._pvc_val[27] / b._pvc_val[27],
        ._pvc_val[28] = a._pvc_val[28] / b._pvc_val[28],
        ._pvc_val[29] = a._pvc_val[29] / b._pvc_val[29],
        ._pvc_val[30] = a._pvc_val[30] / b._pvc_val[30],
        ._pvc_val[31] = a._pvc_val[31] / b._pvc_val[31],
    };
}

static inline PVC_Vect4i
pvc_vdiv_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
    };
}

static inline PVC_Vect8i
pvc_vdiv_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect16i
pvc_vdiv_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect4ui
pvc_vdiv_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
    };
}

static inline PVC_Vect8ui
pvc_vdiv_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect16ui
pvc_vdiv_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
    };
}

static inline PVC_Vect2l
pvc_vdiv_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
    };
}

static inline PVC_Vect4l
pvc_vdiv_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
    };
}

static inline PVC_Vect8l
pvc_vdiv_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect2ul
pvc_vdiv_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
    };
}

static inline PVC_Vect4ul
pvc_vdiv_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
    };
}

static inline PVC_Vect8ul
pvc_vdiv_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
    };
}

static inline PVC_Vect4f
pvc_vdiv_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_div_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8f
pvc_vdiv_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_div_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_div_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_div_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
#endif
    };
}

static inline PVC_Vect16f
pvc_vdiv_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_div_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_div_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_div_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_div_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_div_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_div_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_div_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
        ._pvc_val[8] = a._pvc_val[8] / b._pvc_val[8],
        ._pvc_val[9] = a._pvc_val[9] / b._pvc_val[9],
        ._pvc_val[10] = a._pvc_val[10] / b._pvc_val[10],
        ._pvc_val[11] = a._pvc_val[11] / b._pvc_val[11],
        ._pvc_val[12] = a._pvc_val[12] / b._pvc_val[12],
        ._pvc_val[13] = a._pvc_val[13] / b._pvc_val[13],
        ._pvc_val[14] = a._pvc_val[14] / b._pvc_val[14],
        ._pvc_val[15] = a._pvc_val[15] / b._pvc_val[15],
#endif
    };
}

static inline PVC_Vect2d
pvc_vdiv_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_div_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
#endif
    };
}

static inline PVC_Vect4d
pvc_vdiv_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_div_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_div_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_div_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
#endif
    };
}

static inline PVC_Vect8d
pvc_vdiv_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_div_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_div_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_div_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_div_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_div_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_div_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_div_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = a._pvc_val[0] / b._pvc_val[0],
        ._pvc_val[1] = a._pvc_val[1] / b._pvc_val[1],
        ._pvc_val[2] = a._pvc_val[2] / b._pvc_val[2],
        ._pvc_val[3] = a._pvc_val[3] / b._pvc_val[3],
        ._pvc_val[4] = a._pvc_val[4] / b._pvc_val[4],
        ._pvc_val[5] = a._pvc_val[5] / b._pvc_val[5],
        ._pvc_val[6] = a._pvc_val[6] / b._pvc_val[6],
        ._pvc_val[7] = a._pvc_val[7] / b._pvc_val[7],
#endif
    };
}

/**
 * @def c = pvc_vmin(a, b)
 *
 * @brief Element-wise minimum.
 */
#define pvc_vmin(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vmin_16c,  \
             PVC_Vect32c:  pvc_vmin_32c,  \
             PVC_Vect64c:  pvc_vmin_64c,  \
             PVC_Vect16uc: pvc_vmin_16uc, \
             PVC_Vect32uc: pvc_vmin_32uc, \
             PVC_Vect64uc: pvc_vmin_64uc, \
             PVC_Vect8s:   pvc_vmin_8s,   \
             PVC_Vect16s:  pvc_vmin_16s,  \
             PVC_Vect32s:  pvc_vmin_32s,  \
             PVC_Vect8us:  pvc_vmin_8us,  \
             PVC_Vect16us: pvc_vmin_16us, \
             PVC_Vect32us: pvc_vmin_32us, \
             PVC_Vect4i:   pvc_vmin_4i,   \
             PVC_Vect8i:   pvc_vmin_8i,   \
             PVC_Vect16i:  pvc_vmin_16i,  \
             PVC_Vect4ui:  pvc_vmin_4ui,  \
             PVC_Vect8ui:  pvc_vmin_8ui,  \
             PVC_Vect16ui: pvc_vmin_16ui, \
             PVC_Vect2l:   pvc_vmin_2l,   \
             PVC_Vect4l:   pvc_vmin_4l,   \
             PVC_Vect8l:   pvc_vmin_8l,   \
             PVC_Vect2ul:  pvc_vmin_2ul,  \
             PVC_Vect4ul:  pvc_vmin_4ul,  \
             PVC_Vect8ul:  pvc_vmin_8ul,  \
             PVC_Vect4f:   pvc_vmin_4f,   \
             PVC_Vect8f:   pvc_vmin_8f,   \
             PVC_Vect16f:  pvc_vmin_16f,  \
             PVC_Vect2d:   pvc_vmin_2d,   \
             PVC_Vect4d:   pvc_vmin_4d,   \
             PVC_Vect8d:   pvc_vmin_8d)(a, b)

static inline PVC_Vect16c
pvc_vmin_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_min_epi8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32c
pvc_vmin_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epi8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect64c
pvc_vmin_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epi8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epi8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epi8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epi8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epi8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
        ._pvc_val[32] = pvc_min(a._pvc_val[32], b._pvc_val[32]),
        ._pvc_val[33] = pvc_min(a._pvc_val[33], b._pvc_val[33]),
        ._pvc_val[34] = pvc_min(a._pvc_val[34], b._pvc_val[34]),
        ._pvc_val[35] = pvc_min(a._pvc_val[35], b._pvc_val[35]),
        ._pvc_val[36] = pvc_min(a._pvc_val[36], b._pvc_val[36]),
        ._pvc_val[37] = pvc_min(a._pvc_val[37], b._pvc_val[37]),
        ._pvc_val[38] = pvc_min(a._pvc_val[38], b._pvc_val[38]),
        ._pvc_val[39] = pvc_min(a._pvc_val[39], b._pvc_val[39]),
        ._pvc_val[40] = pvc_min(a._pvc_val[40], b._pvc_val[40]),
        ._pvc_val[41] = pvc_min(a._pvc_val[41], b._pvc_val[41]),
        ._pvc_val[42] = pvc_min(a._pvc_val[42], b._pvc_val[42]),
        ._pvc_val[43] = pvc_min(a._pvc_val[43], b._pvc_val[43]),
        ._pvc_val[44] = pvc_min(a._pvc_val[44], b._pvc_val[44]),
        ._pvc_val[45] = pvc_min(a._pvc_val[45], b._pvc_val[45]),
        ._pvc_val[46] = pvc_min(a._pvc_val[46], b._pvc_val[46]),
        ._pvc_val[47] = pvc_min(a._pvc_val[47], b._pvc_val[47]),
        ._pvc_val[48] = pvc_min(a._pvc_val[48], b._pvc_val[48]),
        ._pvc_val[49] = pvc_min(a._pvc_val[49], b._pvc_val[49]),
        ._pvc_val[50] = pvc_min(a._pvc_val[50], b._pvc_val[50]),
        ._pvc_val[51] = pvc_min(a._pvc_val[51], b._pvc_val[51]),
        ._pvc_val[52] = pvc_min(a._pvc_val[52], b._pvc_val[52]),
        ._pvc_val[53] = pvc_min(a._pvc_val[53], b._pvc_val[53]),
        ._pvc_val[54] = pvc_min(a._pvc_val[54], b._pvc_val[54]),
        ._pvc_val[55] = pvc_min(a._pvc_val[55], b._pvc_val[55]),
        ._pvc_val[56] = pvc_min(a._pvc_val[56], b._pvc_val[56]),
        ._pvc_val[57] = pvc_min(a._pvc_val[57], b._pvc_val[57]),
        ._pvc_val[58] = pvc_min(a._pvc_val[58], b._pvc_val[58]),
        ._pvc_val[59] = pvc_min(a._pvc_val[59], b._pvc_val[59]),
        ._pvc_val[60] = pvc_min(a._pvc_val[60], b._pvc_val[60]),
        ._pvc_val[61] = pvc_min(a._pvc_val[61], b._pvc_val[61]),
        ._pvc_val[62] = pvc_min(a._pvc_val[62], b._pvc_val[62]),
        ._pvc_val[63] = pvc_min(a._pvc_val[63], b._pvc_val[63]),
#endif
    };
}

static inline PVC_Vect16uc
pvc_vmin_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_min_epu8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32uc
pvc_vmin_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epu8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_epu8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect64uc
pvc_vmin_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epu8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epu8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epu8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_epu8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epu8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epu8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
        ._pvc_val[32] = pvc_min(a._pvc_val[32], b._pvc_val[32]),
        ._pvc_val[33] = pvc_min(a._pvc_val[33], b._pvc_val[33]),
        ._pvc_val[34] = pvc_min(a._pvc_val[34], b._pvc_val[34]),
        ._pvc_val[35] = pvc_min(a._pvc_val[35], b._pvc_val[35]),
        ._pvc_val[36] = pvc_min(a._pvc_val[36], b._pvc_val[36]),
        ._pvc_val[37] = pvc_min(a._pvc_val[37], b._pvc_val[37]),
        ._pvc_val[38] = pvc_min(a._pvc_val[38], b._pvc_val[38]),
        ._pvc_val[39] = pvc_min(a._pvc_val[39], b._pvc_val[39]),
        ._pvc_val[40] = pvc_min(a._pvc_val[40], b._pvc_val[40]),
        ._pvc_val[41] = pvc_min(a._pvc_val[41], b._pvc_val[41]),
        ._pvc_val[42] = pvc_min(a._pvc_val[42], b._pvc_val[42]),
        ._pvc_val[43] = pvc_min(a._pvc_val[43], b._pvc_val[43]),
        ._pvc_val[44] = pvc_min(a._pvc_val[44], b._pvc_val[44]),
        ._pvc_val[45] = pvc_min(a._pvc_val[45], b._pvc_val[45]),
        ._pvc_val[46] = pvc_min(a._pvc_val[46], b._pvc_val[46]),
        ._pvc_val[47] = pvc_min(a._pvc_val[47], b._pvc_val[47]),
        ._pvc_val[48] = pvc_min(a._pvc_val[48], b._pvc_val[48]),
        ._pvc_val[49] = pvc_min(a._pvc_val[49], b._pvc_val[49]),
        ._pvc_val[50] = pvc_min(a._pvc_val[50], b._pvc_val[50]),
        ._pvc_val[51] = pvc_min(a._pvc_val[51], b._pvc_val[51]),
        ._pvc_val[52] = pvc_min(a._pvc_val[52], b._pvc_val[52]),
        ._pvc_val[53] = pvc_min(a._pvc_val[53], b._pvc_val[53]),
        ._pvc_val[54] = pvc_min(a._pvc_val[54], b._pvc_val[54]),
        ._pvc_val[55] = pvc_min(a._pvc_val[55], b._pvc_val[55]),
        ._pvc_val[56] = pvc_min(a._pvc_val[56], b._pvc_val[56]),
        ._pvc_val[57] = pvc_min(a._pvc_val[57], b._pvc_val[57]),
        ._pvc_val[58] = pvc_min(a._pvc_val[58], b._pvc_val[58]),
        ._pvc_val[59] = pvc_min(a._pvc_val[59], b._pvc_val[59]),
        ._pvc_val[60] = pvc_min(a._pvc_val[60], b._pvc_val[60]),
        ._pvc_val[61] = pvc_min(a._pvc_val[61], b._pvc_val[61]),
        ._pvc_val[62] = pvc_min(a._pvc_val[62], b._pvc_val[62]),
        ._pvc_val[63] = pvc_min(a._pvc_val[63], b._pvc_val[63]),
#endif
    };
}

static inline PVC_Vect8s
pvc_vmin_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_min_epi16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16s
pvc_vmin_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epi16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32s
pvc_vmin_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epi16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epi16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epi16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epi16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epi16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect8us
pvc_vmin_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_min_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16us
pvc_vmin_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32us
pvc_vmin_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_min(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_min(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_min(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_min(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_min(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_min(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_min(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_min(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_min(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_min(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_min(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_min(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_min(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_min(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_min(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_min(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect4i
pvc_vmin_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_min_epi32(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8i
pvc_vmin_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epi32(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16i
pvc_vmin_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_min_epi32(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epi32(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epi32(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epi32(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epi32(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect4ui
pvc_vmin_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_min_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8ui
pvc_vmin_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16ui
pvc_vmin_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect2l
pvc_vmin_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
#if defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm = _mm_min_epi64(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4l
pvc_vmin_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
#if defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_ymm = _mm256_min_epi64(a._pvc_ymm, b._pvc_ymm),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm[0] = _mm_min_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8l
pvc_vmin_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_min_epi64(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_ymm[0] = _mm256_min_epi64(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epi64(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm[0] = _mm_min_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epi64(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epi64(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect2ul
pvc_vmin_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_min_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4ul
pvc_vmin_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_min_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8ul
pvc_vmin_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_min_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_min_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_min_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect4f
pvc_vmin_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_min_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8f
pvc_vmin_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_min_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_min_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16f
pvc_vmin_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_min_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_min_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_min_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_min(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_min(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_min(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_min(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_min(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_min(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_min(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_min(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect2d
pvc_vmin_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_min_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4d
pvc_vmin_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_min_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8d
pvc_vmin_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_min_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_min_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_min_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_min_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_min_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_min_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_min_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_min(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_min(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_min(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_min(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_min(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_min(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_min(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_min(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

/**
 * @def c = pvc_vmax(a, b)
 *
 * @brief Element-wise maximum.
 */
#define pvc_vmax(a, b)                    \
    _Generic((a),                         \
             PVC_Vect16c:  pvc_vmax_16c,  \
             PVC_Vect32c:  pvc_vmax_32c,  \
             PVC_Vect64c:  pvc_vmax_64c,  \
             PVC_Vect16uc: pvc_vmax_16uc, \
             PVC_Vect32uc: pvc_vmax_32uc, \
             PVC_Vect64uc: pvc_vmax_64uc, \
             PVC_Vect8s:   pvc_vmax_8s,   \
             PVC_Vect16s:  pvc_vmax_16s,  \
             PVC_Vect32s:  pvc_vmax_32s,  \
             PVC_Vect8us:  pvc_vmax_8us,  \
             PVC_Vect16us: pvc_vmax_16us, \
             PVC_Vect32us: pvc_vmax_32us, \
             PVC_Vect4i:   pvc_vmax_4i,   \
             PVC_Vect8i:   pvc_vmax_8i,   \
             PVC_Vect16i:  pvc_vmax_16i,  \
             PVC_Vect4ui:  pvc_vmax_4ui,  \
             PVC_Vect8ui:  pvc_vmax_8ui,  \
             PVC_Vect16ui: pvc_vmax_16ui, \
             PVC_Vect2l:   pvc_vmax_2l,   \
             PVC_Vect4l:   pvc_vmax_4l,   \
             PVC_Vect8l:   pvc_vmax_8l,   \
             PVC_Vect2ul:  pvc_vmax_2ul,  \
             PVC_Vect4ul:  pvc_vmax_4ul,  \
             PVC_Vect8ul:  pvc_vmax_8ul,  \
             PVC_Vect4f:   pvc_vmax_4f,   \
             PVC_Vect8f:   pvc_vmax_8f,   \
             PVC_Vect16f:  pvc_vmax_16f,  \
             PVC_Vect2d:   pvc_vmax_2d,   \
             PVC_Vect4d:   pvc_vmax_4d,   \
             PVC_Vect8d:   pvc_vmax_8d)(a, b)

static inline PVC_Vect16c
pvc_vmax_16c(PVC_Vect16c a, PVC_Vect16c b)
{
    return (PVC_Vect16c){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_max_epi8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32c
pvc_vmax_32c(PVC_Vect32c a, PVC_Vect32c b)
{
    return (PVC_Vect32c){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epi8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect64c
pvc_vmax_64c(PVC_Vect64c a, PVC_Vect64c b)
{
    return (PVC_Vect64c){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epi8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epi8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epi8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epi8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epi8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epi8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
        ._pvc_val[32] = pvc_max(a._pvc_val[32], b._pvc_val[32]),
        ._pvc_val[33] = pvc_max(a._pvc_val[33], b._pvc_val[33]),
        ._pvc_val[34] = pvc_max(a._pvc_val[34], b._pvc_val[34]),
        ._pvc_val[35] = pvc_max(a._pvc_val[35], b._pvc_val[35]),
        ._pvc_val[36] = pvc_max(a._pvc_val[36], b._pvc_val[36]),
        ._pvc_val[37] = pvc_max(a._pvc_val[37], b._pvc_val[37]),
        ._pvc_val[38] = pvc_max(a._pvc_val[38], b._pvc_val[38]),
        ._pvc_val[39] = pvc_max(a._pvc_val[39], b._pvc_val[39]),
        ._pvc_val[40] = pvc_max(a._pvc_val[40], b._pvc_val[40]),
        ._pvc_val[41] = pvc_max(a._pvc_val[41], b._pvc_val[41]),
        ._pvc_val[42] = pvc_max(a._pvc_val[42], b._pvc_val[42]),
        ._pvc_val[43] = pvc_max(a._pvc_val[43], b._pvc_val[43]),
        ._pvc_val[44] = pvc_max(a._pvc_val[44], b._pvc_val[44]),
        ._pvc_val[45] = pvc_max(a._pvc_val[45], b._pvc_val[45]),
        ._pvc_val[46] = pvc_max(a._pvc_val[46], b._pvc_val[46]),
        ._pvc_val[47] = pvc_max(a._pvc_val[47], b._pvc_val[47]),
        ._pvc_val[48] = pvc_max(a._pvc_val[48], b._pvc_val[48]),
        ._pvc_val[49] = pvc_max(a._pvc_val[49], b._pvc_val[49]),
        ._pvc_val[50] = pvc_max(a._pvc_val[50], b._pvc_val[50]),
        ._pvc_val[51] = pvc_max(a._pvc_val[51], b._pvc_val[51]),
        ._pvc_val[52] = pvc_max(a._pvc_val[52], b._pvc_val[52]),
        ._pvc_val[53] = pvc_max(a._pvc_val[53], b._pvc_val[53]),
        ._pvc_val[54] = pvc_max(a._pvc_val[54], b._pvc_val[54]),
        ._pvc_val[55] = pvc_max(a._pvc_val[55], b._pvc_val[55]),
        ._pvc_val[56] = pvc_max(a._pvc_val[56], b._pvc_val[56]),
        ._pvc_val[57] = pvc_max(a._pvc_val[57], b._pvc_val[57]),
        ._pvc_val[58] = pvc_max(a._pvc_val[58], b._pvc_val[58]),
        ._pvc_val[59] = pvc_max(a._pvc_val[59], b._pvc_val[59]),
        ._pvc_val[60] = pvc_max(a._pvc_val[60], b._pvc_val[60]),
        ._pvc_val[61] = pvc_max(a._pvc_val[61], b._pvc_val[61]),
        ._pvc_val[62] = pvc_max(a._pvc_val[62], b._pvc_val[62]),
        ._pvc_val[63] = pvc_max(a._pvc_val[63], b._pvc_val[63]),
#endif
    };
}

static inline PVC_Vect16uc
pvc_vmax_16uc(PVC_Vect16uc a, PVC_Vect16uc b)
{
    return (PVC_Vect16uc){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_max_epu8(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32uc
pvc_vmax_32uc(PVC_Vect32uc a, PVC_Vect32uc b)
{
    return (PVC_Vect32uc){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epu8(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_epu8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu8(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect64uc
pvc_vmax_64uc(PVC_Vect64uc a, PVC_Vect64uc b)
{
    return (PVC_Vect64uc){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epu8(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epu8(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epu8(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_epu8(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu8(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epu8(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epu8(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
        ._pvc_val[32] = pvc_max(a._pvc_val[32], b._pvc_val[32]),
        ._pvc_val[33] = pvc_max(a._pvc_val[33], b._pvc_val[33]),
        ._pvc_val[34] = pvc_max(a._pvc_val[34], b._pvc_val[34]),
        ._pvc_val[35] = pvc_max(a._pvc_val[35], b._pvc_val[35]),
        ._pvc_val[36] = pvc_max(a._pvc_val[36], b._pvc_val[36]),
        ._pvc_val[37] = pvc_max(a._pvc_val[37], b._pvc_val[37]),
        ._pvc_val[38] = pvc_max(a._pvc_val[38], b._pvc_val[38]),
        ._pvc_val[39] = pvc_max(a._pvc_val[39], b._pvc_val[39]),
        ._pvc_val[40] = pvc_max(a._pvc_val[40], b._pvc_val[40]),
        ._pvc_val[41] = pvc_max(a._pvc_val[41], b._pvc_val[41]),
        ._pvc_val[42] = pvc_max(a._pvc_val[42], b._pvc_val[42]),
        ._pvc_val[43] = pvc_max(a._pvc_val[43], b._pvc_val[43]),
        ._pvc_val[44] = pvc_max(a._pvc_val[44], b._pvc_val[44]),
        ._pvc_val[45] = pvc_max(a._pvc_val[45], b._pvc_val[45]),
        ._pvc_val[46] = pvc_max(a._pvc_val[46], b._pvc_val[46]),
        ._pvc_val[47] = pvc_max(a._pvc_val[47], b._pvc_val[47]),
        ._pvc_val[48] = pvc_max(a._pvc_val[48], b._pvc_val[48]),
        ._pvc_val[49] = pvc_max(a._pvc_val[49], b._pvc_val[49]),
        ._pvc_val[50] = pvc_max(a._pvc_val[50], b._pvc_val[50]),
        ._pvc_val[51] = pvc_max(a._pvc_val[51], b._pvc_val[51]),
        ._pvc_val[52] = pvc_max(a._pvc_val[52], b._pvc_val[52]),
        ._pvc_val[53] = pvc_max(a._pvc_val[53], b._pvc_val[53]),
        ._pvc_val[54] = pvc_max(a._pvc_val[54], b._pvc_val[54]),
        ._pvc_val[55] = pvc_max(a._pvc_val[55], b._pvc_val[55]),
        ._pvc_val[56] = pvc_max(a._pvc_val[56], b._pvc_val[56]),
        ._pvc_val[57] = pvc_max(a._pvc_val[57], b._pvc_val[57]),
        ._pvc_val[58] = pvc_max(a._pvc_val[58], b._pvc_val[58]),
        ._pvc_val[59] = pvc_max(a._pvc_val[59], b._pvc_val[59]),
        ._pvc_val[60] = pvc_max(a._pvc_val[60], b._pvc_val[60]),
        ._pvc_val[61] = pvc_max(a._pvc_val[61], b._pvc_val[61]),
        ._pvc_val[62] = pvc_max(a._pvc_val[62], b._pvc_val[62]),
        ._pvc_val[63] = pvc_max(a._pvc_val[63], b._pvc_val[63]),
#endif
    };
}

static inline PVC_Vect8s
pvc_vmax_8s(PVC_Vect8s a, PVC_Vect8s b)
{
    return (PVC_Vect8s){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_max_epi16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16s
pvc_vmax_16s(PVC_Vect16s a, PVC_Vect16s b)
{
    return (PVC_Vect16s){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epi16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32s
pvc_vmax_32s(PVC_Vect32s a, PVC_Vect32s b)
{
    return (PVC_Vect32s){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epi16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epi16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epi16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_epi16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epi16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epi16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect8us
pvc_vmax_8us(PVC_Vect8us a, PVC_Vect8us b)
{
    return (PVC_Vect8us){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_max_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16us
pvc_vmax_16us(PVC_Vect16us a, PVC_Vect16us b)
{
    return (PVC_Vect16us){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect32us
pvc_vmax_32us(PVC_Vect32us a, PVC_Vect32us b)
{
    return (PVC_Vect32us){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
        ._pvc_val[16] = pvc_max(a._pvc_val[16], b._pvc_val[16]),
        ._pvc_val[17] = pvc_max(a._pvc_val[17], b._pvc_val[17]),
        ._pvc_val[18] = pvc_max(a._pvc_val[18], b._pvc_val[18]),
        ._pvc_val[19] = pvc_max(a._pvc_val[19], b._pvc_val[19]),
        ._pvc_val[20] = pvc_max(a._pvc_val[20], b._pvc_val[20]),
        ._pvc_val[21] = pvc_max(a._pvc_val[21], b._pvc_val[21]),
        ._pvc_val[22] = pvc_max(a._pvc_val[22], b._pvc_val[22]),
        ._pvc_val[23] = pvc_max(a._pvc_val[23], b._pvc_val[23]),
        ._pvc_val[24] = pvc_max(a._pvc_val[24], b._pvc_val[24]),
        ._pvc_val[25] = pvc_max(a._pvc_val[25], b._pvc_val[25]),
        ._pvc_val[26] = pvc_max(a._pvc_val[26], b._pvc_val[26]),
        ._pvc_val[27] = pvc_max(a._pvc_val[27], b._pvc_val[27]),
        ._pvc_val[28] = pvc_max(a._pvc_val[28], b._pvc_val[28]),
        ._pvc_val[29] = pvc_max(a._pvc_val[29], b._pvc_val[29]),
        ._pvc_val[30] = pvc_max(a._pvc_val[30], b._pvc_val[30]),
        ._pvc_val[31] = pvc_max(a._pvc_val[31], b._pvc_val[31]),
#endif
    };
}

static inline PVC_Vect4i
pvc_vmax_4i(PVC_Vect4i a, PVC_Vect4i b)
{
    return (PVC_Vect4i){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_max_epi32(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8i
pvc_vmax_8i(PVC_Vect8i a, PVC_Vect8i b)
{
    return (PVC_Vect8i){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epi32(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16i
pvc_vmax_16i(PVC_Vect16i a, PVC_Vect16i b)
{
    return (PVC_Vect16i){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_max_epi32(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epi32(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epi32(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epi32(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi32(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epi32(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epi32(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect4ui
pvc_vmax_4ui(PVC_Vect4ui a, PVC_Vect4ui b)
{
    return (PVC_Vect4ui){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_max_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8ui
pvc_vmax_8ui(PVC_Vect8ui a, PVC_Vect8ui b)
{
    return (PVC_Vect8ui){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16ui
pvc_vmax_16ui(PVC_Vect16ui a, PVC_Vect16ui b)
{
    return (PVC_Vect16ui){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect2l
pvc_vmax_2l(PVC_Vect2l a, PVC_Vect2l b)
{
    return (PVC_Vect2l){
#if defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm = _mm_max_epi64(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4l
pvc_vmax_4l(PVC_Vect4l a, PVC_Vect4l b)
{
    return (PVC_Vect4l){
#if defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_ymm = _mm256_max_epi64(a._pvc_ymm, b._pvc_ymm),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm[0] = _mm_max_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8l
pvc_vmax_8l(PVC_Vect8l a, PVC_Vect8l b)
{
    return (PVC_Vect8l){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_max_epi64(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_ymm[0] = _mm256_max_epi64(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epi64(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__AVX512F__) && defined(__AVX512VL__)
        ._pvc_xmm[0] = _mm_max_epi64(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epi64(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epi64(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epi64(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect2ul
pvc_vmax_2ul(PVC_Vect2ul a, PVC_Vect2ul b)
{
    return (PVC_Vect2ul){
#if defined(__SSE4_1__)
        ._pvc_xmm = _mm_max_epu16(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4ul
pvc_vmax_4ul(PVC_Vect4ul a, PVC_Vect4ul b)
{
    return (PVC_Vect4ul){
#if defined(__AVX2__)
        ._pvc_ymm = _mm256_max_epu16(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8ul
pvc_vmax_8ul(PVC_Vect8ul a, PVC_Vect8ul b)
{
    return (PVC_Vect8ul){
#if defined(__AVX512BW__)
        ._pvc_zmm = _mm512_max_epu16(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX2__)
        ._pvc_ymm[0] = _mm256_max_epu16(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_epu16(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE4_1__)
        ._pvc_xmm[0] = _mm_max_epu16(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_epu16(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_epu16(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_epu16(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect4f
pvc_vmax_4f(PVC_Vect4f a, PVC_Vect4f b)
{
    return (PVC_Vect4f){
#if defined(__SSE__)
        ._pvc_xmm = _mm_max_ps(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8f
pvc_vmax_8f(PVC_Vect8f a, PVC_Vect8f b)
{
    return (PVC_Vect8f){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_max_ps(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_max_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}

static inline PVC_Vect16f
pvc_vmax_16f(PVC_Vect16f a, PVC_Vect16f b)
{
    return (PVC_Vect16f){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_max_ps(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_max_ps(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_ps(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE__)
        ._pvc_xmm[0] = _mm_max_ps(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_ps(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_ps(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_ps(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
        ._pvc_val[8] = pvc_max(a._pvc_val[8], b._pvc_val[8]),
        ._pvc_val[9] = pvc_max(a._pvc_val[9], b._pvc_val[9]),
        ._pvc_val[10] = pvc_max(a._pvc_val[10], b._pvc_val[10]),
        ._pvc_val[11] = pvc_max(a._pvc_val[11], b._pvc_val[11]),
        ._pvc_val[12] = pvc_max(a._pvc_val[12], b._pvc_val[12]),
        ._pvc_val[13] = pvc_max(a._pvc_val[13], b._pvc_val[13]),
        ._pvc_val[14] = pvc_max(a._pvc_val[14], b._pvc_val[14]),
        ._pvc_val[15] = pvc_max(a._pvc_val[15], b._pvc_val[15]),
#endif
    };
}

static inline PVC_Vect2d
pvc_vmax_2d(PVC_Vect2d a, PVC_Vect2d b)
{
    return (PVC_Vect2d){
#if defined(__SSE2__)
        ._pvc_xmm = _mm_max_pd(a._pvc_xmm, b._pvc_xmm),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
#endif
    };
}

static inline PVC_Vect4d
pvc_vmax_4d(PVC_Vect4d a, PVC_Vect4d b)
{
    return (PVC_Vect4d){
#if defined(__AVX__)
        ._pvc_ymm = _mm256_max_pd(a._pvc_ymm, b._pvc_ymm),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
#endif
    };
}

static inline PVC_Vect8d
pvc_vmax_8d(PVC_Vect8d a, PVC_Vect8d b)
{
    return (PVC_Vect8d){
#if defined(__AVX512F__)
        ._pvc_zmm = _mm512_max_pd(a._pvc_zmm, b._pvc_zmm),
#elif defined(__AVX__)
        ._pvc_ymm[0] = _mm256_max_pd(a._pvc_ymm[0], b._pvc_ymm[0]),
        ._pvc_ymm[1] = _mm256_max_pd(a._pvc_ymm[1], b._pvc_ymm[1]),
#elif defined(__SSE2__)
        ._pvc_xmm[0] = _mm_max_pd(a._pvc_xmm[0], b._pvc_xmm[0]),
        ._pvc_xmm[1] = _mm_max_pd(a._pvc_xmm[1], b._pvc_xmm[1]),
        ._pvc_xmm[2] = _mm_max_pd(a._pvc_xmm[2], b._pvc_xmm[2]),
        ._pvc_xmm[3] = _mm_max_pd(a._pvc_xmm[3], b._pvc_xmm[3]),
#else
        ._pvc_val[0] = pvc_max(a._pvc_val[0], b._pvc_val[0]),
        ._pvc_val[1] = pvc_max(a._pvc_val[1], b._pvc_val[1]),
        ._pvc_val[2] = pvc_max(a._pvc_val[2], b._pvc_val[2]),
        ._pvc_val[3] = pvc_max(a._pvc_val[3], b._pvc_val[3]),
        ._pvc_val[4] = pvc_max(a._pvc_val[4], b._pvc_val[4]),
        ._pvc_val[5] = pvc_max(a._pvc_val[5], b._pvc_val[5]),
        ._pvc_val[6] = pvc_max(a._pvc_val[6], b._pvc_val[6]),
        ._pvc_val[7] = pvc_max(a._pvc_val[7], b._pvc_val[7]),
#endif
    };
}
/** @} */

#endif /* _PVC_VECT_H */
